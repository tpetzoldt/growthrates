[{"path":"http://tpetzoldt.github.io/growthrates/articles/Introduction.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Estimation of Growth Rates with Package `growthrates`, Part 1: Introduction","text":"growth rate population direct measure fitness. Therefore, determination growth rates common many disciplines theoretical applied biology, e.g. physiology, ecology, eco-toxicology pharmacology. package aims streamline estimation growth rates direct indirect measures population density (e.g. cell counts, optical density fluorescence) determined batch experiments field observations. applicable different species bacteria, archaea, protists, metazoa, e.g. E. coli, Cyanobacteria, Paramecium, green algae Daphnia. determination growth rates chemostat semi-continuous cultures currently covered package, open include , depending interest availability data. package still development feedback highly welcome.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/articles/Introduction.html","id":"methods","dir":"Articles","previous_headings":"","what":"Methods","title":"Estimation of Growth Rates with Package `growthrates`, Part 1: Introduction","text":"package includes three types methods: Nonlinear fitting parametric growth models like logistic Gompertz growth model. Parametric model fitting done using package FME (Flexible Modelling Environment) Soetaert Petzoldt (2010). addition growth models given closed form (.e. empirical regression equations analytical solutions differential equations) also possible use numerically integrated systems differential equation. models solved package `deSolve’ (Soetaert, Petzoldt, Setzer 2010). Fitting linear models period exponential growth using ``growth rates made easy method’’ Hall et al. (2014) , Nonparametric growthrate estimation using smoothers. R contains several powerful smoothing methods, can leveraged purpose. currently implemented method uses function smooth.spline, similar package grofit (Kahm et al. 2010). package contains methods fit single data sets complete series data sets organized data frame. contains also functions extracting results (e.g. coef, summary, deviance, obs, residuals, rsquared results) methods plotting (plot, lines). implementation follows object oriented style, functions determine automatically method used given class objects.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/articles/Introduction.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Estimation of Growth Rates with Package `growthrates`, Part 1: Introduction","text":"stable version package can installed usual within R RStudio like package, : development version full source code available https://github.com/tpetzoldt/growthrates .","code":"install.packages(\"growthrates\")"},{"path":"http://tpetzoldt.github.io/growthrates/articles/Introduction.html","id":"data-set","dir":"Articles","previous_headings":"","what":"Data set","title":"Estimation of Growth Rates with Package `growthrates`, Part 1: Introduction","text":"data set demonstrating main features package provided Claudia Seiler one series plate reader experiments carried Institute Hydrobiology TU Dresden. describes growth three different strains bacteria (D = Donor, R = Recipient, T = transconjugant) dependence gradient antibiotics tetracycline. loading package: load data inspect structure str: can also inspect full data set View(growthrates) look first lines head: can plot raw data ggplot:  lattice package: lattice figure shown , nice advantages. call even compact applied formula syntax dependend_variable ~ explanation_variable | grouping_variable can also used similar manner growth curve fitting functions starting all_* avoid loops external grouping.","code":"library(\"growthrates\") data(bactgrowth) str(bactgrowth) ## 'data.frame':    2232 obs. of  5 variables: ##  $ strain   : Factor w/ 3 levels \"D\",\"R\",\"T\": 3 3 3 3 3 3 3 3 3 3 ... ##  $ replicate: int  2 2 2 2 2 2 2 2 2 2 ... ##  $ conc     : num  0 0 0 0 0 0 0 0 0 0 ... ##  $ time     : int  0 1 2 3 4 5 6 7 8 9 ... ##  $ value    : num  0.013 0.014 0.017 0.022 0.03 0.039 0.042 0.045 0.048 0.049 ... head(bactgrowth) ##   strain replicate conc time value ## 1      T         2    0    0 0.013 ## 2      T         2    0    1 0.014 ## 3      T         2    0    2 0.017 ## 4      T         2    0    3 0.022 ## 5      T         2    0    4 0.030 ## 6      T         2    0    5 0.039 library(ggplot2) library(dplyr) bactgrowth %>%    mutate(replicate=factor(replicate)) %>%   ggplot(aes(time, value)) +    geom_point(aes(color=replicate)) +    facet_grid(strain ~ conc) library(lattice) data(bactgrowth) xyplot(value ~ time|strain + as.factor(conc), data = bactgrowth,        groups = replicate, pch = 16, cex = 0.5)"},{"path":"http://tpetzoldt.github.io/growthrates/articles/Introduction.html","id":"estimation-of-growth-rates","dir":"Articles","previous_headings":"","what":"Estimation of growth rates","title":"Estimation of Growth Rates with Package `growthrates`, Part 1: Introduction","text":"Package growthrates can determine growth parameters single experiments, complete series experiments, subsets one step. start overview ``single subset’’-methods show examples fitting growth models full data set. examples can found help pages package. ** Single data sets ** Single data sets can analysed functions fit_easylinear, fit_growthmodels fit_splines. prerequisite, single data sets containing one treatment extracted complete experiment, can done function `multsiplit’. following example, full data table first split list experiments according vector criteria first experiment extracted:","code":""},{"path":"http://tpetzoldt.github.io/growthrates/articles/Introduction.html","id":"easy-linear-method","dir":"Articles","previous_headings":"Estimation of growth rates","what":"Easy Linear Method","title":"Estimation of Growth Rates with Package `growthrates`, Part 1: Introduction","text":"next step, model fitting done, e.g. “easylinear” method: method fits segments linear models log-transformed data tries find maximum growth rate. Several functions exist inspect outcome model fit, e.g.: Plotting can done either log-scale re-transformation:  addition original method Hall et al. (2014) also possible modify default settings algorithm:","code":"splitted.data <- multisplit(bactgrowth, c(\"strain\", \"conc\", \"replicate\")) dat <- splitted.data[[1]] fit <- fit_easylinear(dat$time, dat$value) summary(fit) ##  ## Call: ## lm(formula = y ~ x) ##  ## Residuals: ##        1        2        3        4        5        6  ##  0.02113 -0.03716 -0.03727  0.04552  0.06376 -0.05598  ##  ## Coefficients: ##             Estimate Std. Error t value Pr(>|t|)     ## (Intercept) -4.39425    0.06429  -68.35 2.74e-07 *** ## x            0.20490    0.01336   15.34 0.000105 *** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Residual standard error: 0.05587 on 4 degrees of freedom ## Multiple R-squared:  0.9833, Adjusted R-squared:  0.9791  ## F-statistic: 235.3 on 1 and 4 DF,  p-value: 0.0001053 coef(fit)      # exponential growth parameters ##        y0     y0_lm     mumax       lag  ## 0.0180000 0.0123482 0.2048985 1.8392607 rsquared(fit)  # coefficient of determination (of log-transformed data) ##        r2  ## 0.9832876 deviance(fit)  # residual sum of squares of log-transformed data ## [1] 0.01248744 par(mfrow = c(1, 2)) plot(fit, log = \"y\") plot(fit) fitx <- fit_easylinear(dat$time, dat$value, h = 8, quota = 0.95) plot(fit) lines(fitx, pch = \"+\", col = \"blue\")"},{"path":"http://tpetzoldt.github.io/growthrates/articles/Introduction.html","id":"parametric-nonlinear-growth-models","dir":"Articles","previous_headings":"Estimation of growth rates","what":"Parametric nonlinear growth models","title":"Estimation of Growth Rates with Package `growthrates`, Part 1: Introduction","text":"parametric growth model consists mathematical formula describes growth population (e.g. grow_logistic) parameters (e.g. y0, mumax, K,). Fitting parametric model process estimating optimal parameter set minimizes given quality criterion. use method least squares, also known ordinary least squares regression (OLS). growth models non-linear, need always goof set start parameters p. wise choose values start parameters carefully considering main properties selected growth model (e.g. carrying capacity K around observed maximum data), experimentation, .e. plotting model together data. order prevent unrealistic (e.g. negative) parameter values, optionally possible specify box-constraints (upper lower). difficult problems one may consider change involved model fitting algorithm Marquardt (\"Marq\") something else, e.g. \"L-BFGS-B\". Details can found ?modFit help page.","code":"p     <- c(y0 = 0.01, mumax = 0.2, K = 0.1) lower <- c(y0 = 1e-6, mumax = 0,   K = 0) upper <- c(y0 = 0.05, mumax = 5,   K = 0.5)  fit1 <- fit_growthmodel(FUN = grow_logistic, p = p, dat$time, dat$value,                         lower = lower, upper = upper)  p     <- c(yi = 0.02, ya = 0.001, kw = 0.1, mumax = 0.2, K = 0.1) lower <- c(yi = 1e-6, ya = 1e-6, kw = 0,    mumax = 0,   K = 0) upper <- c(yi = 0.05, ya = 0.05, kw = 10,   mumax = 5,   K = 0.5)  fit2 <- fit_growthmodel(FUN = grow_twostep, p = p, time = dat$time, y = dat$value,                         lower = lower, upper = upper)  coef(fit1) ##         y0      mumax          K  ## 0.01748268 0.20006907 0.09962612 coef(fit2) ##          yi          ya          kw       mumax           K  ## 0.013140465 0.004005239 8.659565328 0.202312435 0.099735868 par(mfrow = c(1, 2)) plot(fit1) lines(fit2, col = \"red\")  plot(fit1, log = \"y\") lines(fit2, col = \"red\")"},{"path":"http://tpetzoldt.github.io/growthrates/articles/Introduction.html","id":"differential-equation-models","dir":"Articles","previous_headings":"Estimation of growth rates > Parametric nonlinear growth models","what":"Differential equation models","title":"Estimation of Growth Rates with Package `growthrates`, Part 1: Introduction","text":"two-step model abode, growth described two-step process adaption inactive cells yiy_i logistic growth active cells yay_a: dyidt=−kw⋅yi\\frac{dy_i}{dt} = - k_w \\cdot y_i dyadt=kw⋅yi+μmax⋅ya⋅(1−ya+yiK)\\frac{dy_a}{dt} =   k_w \\cdot y_i + \\mu_{max} \\cdot   y_a \\cdot \\left(1 - \\frac{y_a + y_i}{K} \\right) amount total organisms y=yi+yay = y_i + y_a, adaption rate kwk_w, intrinsic growth rate μmax\\mu_{max}, carrying capacity KK. initial abundance (normally y0y_0) splitted two separate values, yi,0y_{,0} ya,0y_{,0} default also fitted. underlying ordinary differential equation (ODE) model simple analytical solution therefore solved numerically using differential solver package deSolve. , model solver running compiled code (C resp. Fortran), course also possible define user-specified models R code. Details can found Part 2 package documentation.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/articles/Introduction.html","id":"selective-parameter-fitting","dir":"Articles","previous_headings":"Estimation of growth rates > Parametric nonlinear growth models","what":"Selective parameter fitting","title":"Estimation of Growth Rates with Package `growthrates`, Part 1: Introduction","text":"Despite fact model solved differential equation, relatively high number parameters may need special care, . cases, package growthrates allows fit subsets parameters setting others fixed values. following, done specifying subset without initial abundances yay_a yiy_i :  see summary shows fitted parameters whereas coef contains full set. Note however, start values need given p model parameters, .e. fitted fixed ones, upper lower bounds fixed parameters can omitted.","code":"fit3 <- fit_growthmodel(FUN = grow_twostep, p = p, time = dat$time, y = dat$value,                         lower = lower, upper = upper, which = c(\"kw\", \"mumax\", \"K\"))  summary(fit3) ##  ## Parameters: ##        Estimate Std. Error t value Pr(>|t|)     ## kw     9.791445  66.893493   0.146    0.885     ## mumax  0.174802   0.015625  11.188 7.64e-12 *** ## K      0.101923   0.002429  41.958  < 2e-16 *** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Residual standard error: 0.00452 on 28 degrees of freedom ##  ## Parameter correlation: ##            kw   mumax       K ## kw     1.0000 -0.8893  0.5405 ## mumax -0.8893  1.0000 -0.7735 ## K      0.5405 -0.7735  1.0000 coef(fit3) ##        yi        ya        kw     mumax         K  ## 0.0200000 0.0010000 9.7914448 0.1748016 0.1019230 plot(fit3)"},{"path":"http://tpetzoldt.github.io/growthrates/articles/Introduction.html","id":"nonparametric-smoothing-splines","dir":"Articles","previous_headings":"Estimation of growth rates","what":"Nonparametric smoothing splines","title":"Estimation of Growth Rates with Package `growthrates`, Part 1: Introduction","text":"Smoothing splines quick method estimate maximum growth. method called nonparametric, growth rate directly estimated smoothed data without restricted specific model formula.","code":"dat <- splitted.data[[2]] time <- dat$time y    <- dat$value  ## automatic smoothing with cv res <- fit_spline(time, y)  par(mfrow = c(1, 2)) plot(res, log = \"y\") plot(res) coef(res) ##          y0       mumax  ## 0.006562443 0.335991063"},{"path":"http://tpetzoldt.github.io/growthrates/articles/Introduction.html","id":"fit-multiple-data-sets-without-loops","dir":"Articles","previous_headings":"","what":"Fit multiple data sets without loops","title":"Estimation of Growth Rates with Package `growthrates`, Part 1: Introduction","text":"Fitting multiple data sets possible functions all_easylinear, all_growthmodels all_splines. Usage similar methods, parameters analogous single-fit methods. , easy growth rates smooting splines method quite robust. contrast , parametric fits function all_growthmodels need care little bit computational power. , special emphasis given selection good starting points. addition, possible select alternative optimization algorithm, enable additional output (trace) fine-tune optimization control parameters. Nevertheless, noted parametric models explanatory power may therefore advantageous basic research. Nonlinear optimization done parallelized code, multi-core computers can speed computation.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/articles/Introduction.html","id":"fit-smoothing-splines-to-multiple-data","dir":"Articles","previous_headings":"Fit multiple data sets without loops","what":"Fit smoothing splines to multiple data","title":"Estimation of Growth Rates with Package `growthrates`, Part 1: Introduction","text":"can good idea, start nonparametric approach like smoothing spline method get first impression , potentially, derive start parameters parametric model. following, show example smoothing spline method. function uses formula interface syntax: dependent_variable ~ independent_variable | group1 + group 2 + ...: example, smoothness set moderate value (spar = 0.5). values zero one result different degrees smoothing. spar omitted, leave-one-cross-validation used determine smoothness automatically. works best samples time true replicates independent experimental units, instead pseudo-replicates potential autocorrelation.","code":"many_spline_fits <- all_splines(value ~ time | strain + conc + replicate,                                 data = bactgrowth, spar = 0.5)  par(mfrow = c(12, 6)) par(mar = c(2.5, 4, 2, 1)) plot(many_spline_fits)"},{"path":"http://tpetzoldt.github.io/growthrates/articles/Introduction.html","id":"fit-parametric-models-to-multiple-data","dir":"Articles","previous_headings":"Fit multiple data sets without loops","what":"Fit parametric models to multiple data","title":"Estimation of Growth Rates with Package `growthrates`, Part 1: Introduction","text":"Package growthrates allows fit parametric models series grouped data. formula interface function all_growthmodels allows include name nonlinear model (grow_....-function) name independent variable (e.g. time) first argument, example grow_logistic(time, parms). second argument parms dummy argument; name currently (yet) matter. Model fitting can make use multiple CPU cores speed computation. ncores argument omitted, number cores automatically detected setting ncores = 1 can useful debugging. following, let’s fit Baranyi growth model (Baranyi Roberts 1995) data, model considers lag phase period build ``critical substances’’ needed growth. model based system two differential equations simplifying assumptions analytical solution presented. first attempt, fit parameters model: whereas second trial, h0 fixed common value avoid h0 consumes parts effect interdependency h0 mumax: result second fit shown following figure. may noted even better fits possible models parameters, e.g. Huang (2011), cost effect antibiotics distributed several correlated parameters instead effect maximum growth rate.","code":"## initial parameters and box constraints p   <- c(y0 = 0.03, mumax = .1, K = 0.1, h0 = 1)  lower   <- c(y0 = 0.001, mumax = 1e-2, K = 0.005, h0 = 0) upper   <- c(y0 = 0.1,   mumax = 1,    K = 0.5,   h0 = 10)  ## fit growth models to all data using log transformed residuals many_baranyi1 <- all_growthmodels(                    value ~ grow_baranyi(time, parms) | strain + conc + replicate,                    data = bactgrowth,                    p = p, lower = lower, upper = upper,                    transform = \"log\", ncores = 2) ## use coefficients of first fit as new initial parameters pp   <- coef(many_baranyi1) ## but set h0 to a fixed value pp[, \"h0\"] <- 0.65 ## re-fit models many_baranyi2 <- all_growthmodels(                    value ~ grow_baranyi(time, parms) | strain + conc + replicate,                    data = bactgrowth,                    p = pp, lower = lower, upper = upper,                    which = c(\"y0\", \"mumax\", \"K\"), transform = \"log\", ncores = 2) par(mfrow = c(12, 6)) par(mar = c(2.5, 4, 2, 1)) plot(many_baranyi2)"},{"path":"http://tpetzoldt.github.io/growthrates/articles/Introduction.html","id":"dose-respone-curves","dir":"Articles","previous_headings":"Fit multiple data sets without loops","what":"Dose Respone Curves","title":"Estimation of Growth Rates with Package `growthrates`, Part 1: Introduction","text":"Dependency growth rate antibiotic concentration three strains spline fit Baranyi model. first extract table results fitted objects: resulting data frames follow “tidy structure” ensuring compatibility ggplot2.","code":"many_spline_res   <- results(many_spline_fits) many_baranyi2_res <- results(many_baranyi2)"},{"path":"http://tpetzoldt.github.io/growthrates/articles/Introduction.html","id":"nonparameric-spline-fits","dir":"Articles","previous_headings":"Fit multiple data sets without loops > Dose Respone Curves","what":"Nonparameric Spline Fits","title":"Estimation of Growth Rates with Package `growthrates`, Part 1: Introduction","text":"","code":"many_spline_res %>%   ggplot(aes(log(conc + 1), mumax)) +    geom_point() +   geom_smooth() +   facet_wrap(~ strain) ## `geom_smooth()` using method = 'loess' and formula = 'y ~ x'"},{"path":"http://tpetzoldt.github.io/growthrates/articles/Introduction.html","id":"parametric-baranyi-model","dir":"Articles","previous_headings":"Fit multiple data sets without loops > Dose Respone Curves","what":"Parametric Baranyi Model","title":"Estimation of Growth Rates with Package `growthrates`, Part 1: Introduction","text":"alternative, visualization also possible R’s “base graphics” functions lattice graphics: Describing observed dependency can approached nonparametric methods parametric functional response curves, may done using specialized package dose-response curves, example package drc (Ritz Streibig 2005).","code":"many_baranyi2_res %>%   ggplot(aes(log(conc + 1), mumax)) +    geom_point() +   geom_smooth() +   facet_wrap(~ strain) ## `geom_smooth()` using method = 'loess' and formula = 'y ~ x' xyplot(mumax ~ log(conc+1)|strain, data = many_spline_res, layout = c(3, 1)) xyplot(mumax ~ log(conc+1)|strain, data = many_baranyi2_res, layout = c(3, 1))"},{"path":"http://tpetzoldt.github.io/growthrates/articles/Introduction.html","id":"acknowledgments","dir":"Articles","previous_headings":"","what":"Acknowledgments","title":"Estimation of Growth Rates with Package `growthrates`, Part 1: Introduction","text":"Many thanks Claudia Seiler data set, R Core Team (R Core Team 2015) developing maintaining R. documentation written using knitr (Xie 2014) rmarkdown (Allaire et al. 2015).","code":""},{"path":"http://tpetzoldt.github.io/growthrates/articles/Introduction.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Estimation of Growth Rates with Package `growthrates`, Part 1: Introduction","text":"Copyright original author: tpetzoldt, 2025-08-28","code":""},{"path":"http://tpetzoldt.github.io/growthrates/articles/User_models.html","id":"introduction","dir":"Articles","previous_headings":"","what":"1. Introduction","title":"Estimation of Growth Rates with Package `growthrates`, Part 2: User-defined Growth Models","text":"Package growthrates comes set pararametric growth models built-, sufficient many application scenarios, course circumstances. document describes set available functions can extended user-defined models. Section (3) describes simple regression functions existing closed form can implemented. Section (4) see growth models defined systems ordinary differential equations (ODE) can implemented directy R finally Section (5) describes ODE models can implemented C inline functions.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/articles/User_models.html","id":"differential-equations-or-closed-form","dir":"Articles","previous_headings":"","what":"2. Differential equations or closed form?","title":"Estimation of Growth Rates with Package `growthrates`, Part 2: User-defined Growth Models","text":"Growth models can either “ordinary functions” time f(t)f(t) closed form, allow get values dependend variable yy immediately given value independent variable tt (timetime) without need iteration. , can differential equation model dy/dtdy/dt needs numerical integration. Sometimes, model can given either forms. example, logistic growth model can written differential equation: dydt=μmax⋅y(1−yK)\\frac{dy}{dt} = \\mu_{max} \\cdot y \\left(1 - \\frac{y}{K}\\right) analytical solution closed form: y(t)=K⋅y0y0+(K−y0)⋅e−μmax⋅ty(t) = \\frac{K \\cdot y_0}{y_0 + (K - y_0) \\cdot e^{-\\mu_{max} \\cdot t}} see, much easier use second form, yy can immediately calculated tt, first version, need either calculus (get second form solution), use numerical method simulate evolution yy stepwise time. hand, models given differential equations often directly related mechanistic process description easier extended.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/articles/User_models.html","id":"growth-models-in-closed-form","dir":"Articles","previous_headings":"","what":"3. Growth models in closed form","title":"Estimation of Growth Rates with Package `growthrates`, Part 2: User-defined Growth Models","text":"Let’s assume want extend logistic growth model additional shift parameter yy direction, example, part population participate growing. leads equation like: y(t)=K⋅y0y0+(K−y0)⋅e−μmaxt+yshifty(t) = \\frac{K \\cdot y_0}{y_0 + (K - y_0) \\cdot e^{-\\mu_{max} t}} + y_{shift} loading package growthrates: can immediately define function user workspace, without modifying package . order make compatible package growthrates, sufficient streamline input output interfaces style described help page ?growthmodel. function can valid name, : must exactly two arguments time parms input return value (output) must matrix least 2 columns column names time y. inner part function can adapted necessary, long connection input output makes sense scientific viewpoint. , first look, circumstantial .matrix(data.frame(())) construction just simple way create required output format. course wise test function beforehand, example:  Future versions growthrates package may introduce additional checks, already good idea convert function appropriate object class growthmodel -called constructor function name: Now new model ready fitted test data:","code":"library(\"growthrates\") grow_logistic_yshift <- function(time, parms) {   with(as.list(parms), {     y <- (K * y0) / (y0 + (K - y0) * exp(-mumax * time)) + y_shift     as.matrix(data.frame(time = time, y = y))   }) } time <- 1:10 out <- grow_logistic_yshift(time, parms = list(y0 = 1, mumax = 0.5, K = 10, y_shift = 2)) plot(time, out[, \"y\"], type = \"b\") grow_logistic_yshift <- growthmodel(grow_logistic_yshift,                                     c(\"y0\", \"mumax\", \"K\", \"y_shift\")) x <- seq(5, 100, 5) y <- c(2.1, 2.3, 5, 4.7, 4.3, 6.9, 8.2, 11.5, 8.8, 10.2, 14.5, 12.5,        13.6, 12.7, 14.2, 12.5, 13.8, 15.1, 12.7, 14.9)  fit <- fit_growthmodel(grow_logistic_yshift,                        p = c(y0 = 1, mumax = 0.1, K = 10, K = 10, y_shift = 1),                        time = x, y = y) plot(fit) summary(fit) ##  ## Parameters: ##         Estimate Std. Error t value Pr(>|t|)     ## y0       0.86510    1.15526   0.749 0.464826     ## mumax    0.08134    0.02737   2.972 0.008995 **  ## K       12.99885    2.56970   5.059 0.000116 *** ## y_shift  1.04939    2.22481   0.472 0.643528     ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Residual standard error: 1.248 on 16 degrees of freedom ##  ## Parameter correlation: ##              y0   mumax       K y_shift ## y0       1.0000 -0.9632  0.9555 -0.9477 ## mumax   -0.9632  1.0000 -0.8989  0.8519 ## K        0.9555 -0.8989  1.0000 -0.9766 ## y_shift -0.9477  0.8519 -0.9766  1.0000"},{"path":"http://tpetzoldt.github.io/growthrates/articles/User_models.html","id":"differential-equation-models-in-r","dir":"Articles","previous_headings":"","what":"4. Differential equation models in R","title":"Estimation of Growth Rates with Package `growthrates`, Part 2: User-defined Growth Models","text":"Differential equation models can used quite similar . little bit complex : need two functions. One ODE model (derivatives) one numerical integration. ODE model distinguishes time dependent state variables constant parameters, can considered parameters statistical sense. distinction statistical parameters (viewpoint model fitting) ODE model parameters confused. numerical integration broad field needs experience care. short overview topic can found Soetaert, Petzoldt, Setzer (2010). following, let’s assume model carrying capacity function time. can modelled system two differential equations, one carrying capacity (KK) another population abundance (yy). sake simplicity assume linear increase KK, complex models course also possible, e.g. biochemical conversion mixed substrate, Monod-dependency limited resource, density dependence semi-continuos addition nutrients. growth model built two parts: function ode_... differential equations, growth model grow_... calculating numerical solution. latter, statistical parameters splitted initial values states (init) ODE model parameters. , need distinguish initial (start) values, e.g. y0y_0 state variables yy change simulation. , ’s good idea test first: fit model data:","code":"ode_K_linear <- function (time, init, parms, ...) {   with(as.list(c(parms, init)), {     dy <- mumax * y * (1 - y/K)     dK <- dK     list(c(dy, dK))   }) }  grow_K_linear <- function(time, parms, ...) {   init    <- parms[c(\"y0\", \"K\")]           # initial values   names(init) <- c(\"y\", \"K\")               # force names of state variables   odeparms <- parms[c(\"mumax\", \"dK\")]      # the parms of the ODE model   out <- ode(init, time, ode_K_linear, parms = odeparms)   out } grow_K_linear <- growthmodel(grow_K_linear,                              pnames = c(\"y0\", \"K\", \"mumax\", \"deltaK\")) head(grow_K_linear(time = 1:10, c(y0 = .1, K = 1, mumax = 0.1, dK = 0.5))) ##      time         y   K ## [1,]    1 0.1000000 1.0 ## [2,]    2 0.1095851 1.5 ## [3,]    3 0.1203149 2.0 ## [4,]    4 0.1322238 2.5 ## [5,]    5 0.1453939 3.0 ## [6,]    6 0.1599322 3.5 x <- seq(5, 100, 5) y <- c(0.1, 2.2, 3.1, 1.5, 8.9, 8, 8.4, 9.8, 9.3, 10.6, 12, 13.6,   13.1, 13.3, 11.6, 14.7, 12.6, 13.9, 16.9, 14.4) fit <- fit_growthmodel(grow_K_linear,                        p = c(y0 = 0.1, mumax = 0.2, K = 10, dK = .1), time = x, y = y) plot(fit) summary(fit) ##  ## Parameters: ##       Estimate Std. Error t value Pr(>|t|)     ## y0     0.53286    0.55248   0.964 0.349157     ## mumax  0.18124    0.07555   2.399 0.028988 *   ## K      7.76895    1.65802   4.686 0.000248 *** ## dK     0.08490    0.02375   3.575 0.002529 **  ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Residual standard error: 1.442 on 16 degrees of freedom ##  ## Parameter correlation: ##            y0   mumax       K      dK ## y0     1.0000 -0.9211  0.5040 -0.3791 ## mumax -0.9211  1.0000 -0.6911  0.5596 ## K      0.5040 -0.6911  1.0000 -0.9528 ## dK    -0.3791  0.5596 -0.9528  1.0000"},{"path":"http://tpetzoldt.github.io/growthrates/articles/User_models.html","id":"inline-c-code-with-package-code","dir":"Articles","previous_headings":"","what":"5. Inline C code with package cOde","title":"Estimation of Growth Rates with Package `growthrates`, Part 2: User-defined Growth Models","text":"numerical simulation ODE models can sometimes slow, may tempted speed . indeed possible compiled code, .e. model written another programming language (Fortran C) faster compared R. Several methods exist can done, see example Soetaert, Petzoldt, Setzer (2010) Kneis (2016) Kneis, Petzoldt, Berendonk (2017). following, use method allows inline code, .e. direkt integration C code R script using package cOde (Kaschek 2016). Note, however, compiled code needs necessary C (/Fortran) compilers additional developer tools. often installed Linux systems default, whereas Windows toolset available https://cran.r-project.org/bin/windows/Rtools/ needs additional installation.","code":"## The following example shows how to use compiled growth models ## from inline code, by using the 'cOde' package of Daniel Kaschek ## Note: This example needs the R development tools. ##  - suitable compilers on Linux and Mac ##  - Rtools on Windows from https://cran.r-project.org/bin/windows/Rtools/  library(\"growthrates\") library(\"cOde\")  ## define a system of ODEs and compile it -------------------------------------- ode_K_linear <- funC(c(   y = \"mumax * y * (1-y/K)\",   K = \"dK\" ))  yini <- c(y = 1, K = 10) parms = c(mumax = 0.1, dK = 0.05)  ## run the model out1 <- odeC(yini, times = 0:100, ode_K_linear, parms = parms)  ## generate artificial test data with normal distributed noise x <- seq(5, 100, 5) y <- odeC(yini, x, ode_K_linear, parms)[, \"y\"] + rnorm(x)   ## create a \"growthmodel\" with interfaces compatible to package growthrates ## It is essential to use consistent names for parameters and initial values!  grow_K_linear <- function(time, parms, ...) {   init    <- parms[c(\"y0\", \"K\")]  # initial values   names(init) <- c(\"y\", \"K\")      # force names   out <- odeC(init, time, ode_K_linear, parms)   out }  ## convert this to an object, (maybe needed by future extensions) grow_K_linear <- growthmodel(grow_K_linear, pnames = c(\"y0\", \"mumax\", \"K\", \"dK\"))  ## Test the growthmodel ## Columns with names 'time' and 'y' are mandatory. head(grow_K_linear(time = x, c(y0 = 1, mumax = 0.1, K = 10, dK = 0.1)))   ## Fit the model --------------------------------------------------------------- fit <- fit_growthmodel(grow_K_linear,                        p = c(y0 = 1, mumax = 0.1, K = 10, dK = 0.1), time = x, y = y) plot(fit) summary(fit)  ## Unload DLL and cleanup ------------------------------------------------------ ## DLL creation should ideally be directed to a temporary directory. dll <- paste(ode_K_linear, .Platform$dynlib.ext, sep = \"\") dyn.unload(dll) unlink(dll) unlink(paste(ode_K_linear, \".c\", sep = \"\")) unlink(paste(ode_K_linear, \".o\", sep = \"\"))"},{"path":"http://tpetzoldt.github.io/growthrates/articles/User_models.html","id":"acknowledgments","dir":"Articles","previous_headings":"","what":"Acknowledgments","title":"Estimation of Growth Rates with Package `growthrates`, Part 2: User-defined Growth Models","text":"Many thanks Claudia Seiler data set, David Kneis fruitful discussions, Daniel Kaschek cOde package, R Core Team (R Core Team 2015) developing maintaining R. documentation written using knitr (Xie 2014) rmarkdown (Allaire et al. 2015).","code":""},{"path":"http://tpetzoldt.github.io/growthrates/articles/User_models.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Estimation of Growth Rates with Package `growthrates`, Part 2: User-defined Growth Models","text":"Copyright original author: tpetzoldt, 2025-08-28","code":""},{"path":"http://tpetzoldt.github.io/growthrates/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Thomas Petzoldt. Author, maintainer.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Petzoldt T (2025). growthrates: Estimate Growth Rates Experimental Data. R package version 0.8.6, https://github.com/tpetzoldt/growthrates.","code":"@Manual{,   title = {growthrates: Estimate Growth Rates from Experimental Data},   author = {Thomas Petzoldt},   year = {2025},   note = {R package version 0.8.6},   url = {https://github.com/tpetzoldt/growthrates}, }"},{"path":[]},{"path":"http://tpetzoldt.github.io/growthrates/index.html","id":"estimate-growth-rates-from-experimental-data","dir":"","previous_headings":"","what":"Estimate Growth Rates from Experimental Data","title":"Estimate Growth Rates from Experimental Data","text":"population growth rate main indicator population fitness. R package provides collection methods determine growth rates experimental data, particular batch experiments microwell plate reader trials.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Estimate Growth Rates from Experimental Data","text":"package contains basically three methods: fit linear regression subset data steepest log-linear increase (method, similar Hall et al., 2014), fit parametric nonlinear models complete data set, model functions can given either closed form numerically solved (system ) differential equation(s), use maximum 1st derivative smoothing spline log-transformed y-values (similar Kahm et al., 2010). package can fit data sets single experiments complete series containing multiple data sets. Included functions extracting estimates plotting. package supports growth models given numerically solved differential equations. Multi-core computation used speed fitting parametric models.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Estimate Growth Rates from Experimental Data","text":"Introduction main functions Writing user defined functions","code":""},{"path":[]},{"path":"http://tpetzoldt.github.io/growthrates/index.html","id":"release-version-recommended","dir":"","previous_headings":"Download and Installation","what":"Release version (recommended)","title":"Estimate Growth Rates from Experimental Data","text":"package available CRAN. Install within R RStudio usual :","code":"install.packages(\"growthrates\")"},{"path":"http://tpetzoldt.github.io/growthrates/index.html","id":"development-version","dir":"","previous_headings":"Download and Installation","what":"Development version","title":"Estimate Growth Rates from Experimental Data","text":"Install package devtools:","code":"install.packages(\"devtools\") library(devtools) install_github(\"tpetzoldt/growthrates\")"},{"path":"http://tpetzoldt.github.io/growthrates/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Estimate Growth Rates from Experimental Data","text":"Hall, B. G., H. Acar, . Nandipati, M. Barlow. 2014. Growth Rates Made Easy. Mol. Biol. Evol. 31: 232-38. https://dx.doi.org/10.1093/molbev/mst187 Kahm, Matthias, Guido Hasenbrink, Hella Lichtenberg-Frate, Jost Ludwig, Maik Kschischo. 2010. grofit: Fitting Biological Growth Curves R. Journal Statistical Software 33 (7): 1-21. https://dx.doi.org/10.18637/jss.v033.i07 R Core Team. 2015. R: Language Environment Statistical Computing. Vienna, Austria: R Foundation Statistical Computing. https://www.R-project.org/ Soetaert, Karline, Thomas Petzoldt. 2010. Inverse Modelling, Sensitivity Monte Carlo Analysis R Using Package FME. Journal Statistical Software 33 (3): 1-28. https://dx.doi.org/10.18637/jss.v033.i03 Soetaert, Karline, Thomas Petzoldt, R. Woodrow Setzer. 2010. Solving Differential Equations R: Package deSolve. Journal Statistical Software 33 (9): 1-25. https://dx.doi.org/10.18637/jss.v033.i09","code":""},{"path":"http://tpetzoldt.github.io/growthrates/index.html","id":"author","dir":"","previous_headings":"","what":"Author","title":"Estimate Growth Rates from Experimental Data","text":"tpetzoldt","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/all_easylinear.html","id":null,"dir":"Reference","previous_headings":"","what":"Easy Growth Rates Fit to data Frame — all_easylinear","title":"Easy Growth Rates Fit to data Frame — all_easylinear","text":"Determine maximum growth rates log-linear part growth curve series experiments.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/all_easylinear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Easy Growth Rates Fit to data Frame — all_easylinear","text":"","code":"all_easylinear(...)  # S3 method for class 'formula' all_easylinear(formula, data, h = 5, quota = 0.95, subset = NULL, ...)  # S3 method for class 'data.frame' all_easylinear(   data,   grouping,   time = \"time\",   y = \"value\",   h = 5,   quota = 0.95,   ... )"},{"path":"http://tpetzoldt.github.io/growthrates/reference/all_easylinear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Easy Growth Rates Fit to data Frame — all_easylinear","text":"... generic parameters, reserved future extensions. formula model formula specifying dependent, independent grouping variables form: dependent ~ independent | group1 + group2 + .... data data frame observational data. h window (number data). quota part window fits considered overall linear fit (relative max. growth rate). subset specification rows used: defaults rows. grouping model formula character vector criteria defining subsets data frame. time character vectors name independent variabl.e. y character vector name dependent variable","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/all_easylinear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Easy Growth Rates Fit to data Frame — all_easylinear","text":"object parameters fits.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/all_easylinear.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Easy Growth Rates Fit to data Frame — all_easylinear","text":"Hall, BG., Acar, H, Nandipati, Barlow, M (2014) Growth Rates Made Easy. Mol. Biol. Evol. 31: 232-38, doi:10.1093/molbev/mst187","code":""},{"path":[]},{"path":"http://tpetzoldt.github.io/growthrates/reference/all_easylinear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Easy Growth Rates Fit to data Frame — all_easylinear","text":"","code":"# \\donttest{ library(\"growthrates\") L <- all_easylinear(value ~ time | strain + conc + replicate, data=bactgrowth) summary(L) #> $`D:0:1` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>        1        2        3        4        5        6  #>  0.02113 -0.03716 -0.03727  0.04552  0.06376 -0.05598  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -4.39425    0.06429  -68.35 2.74e-07 *** #> x            0.20490    0.01336   15.34 0.000105 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.05587 on 4 degrees of freedom #> Multiple R-squared:  0.9833,\tAdjusted R-squared:  0.9791  #> F-statistic: 235.3 on 1 and 4 DF,  p-value: 0.0001053 #>  #>  #> $`R:0:1` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>        1        2        3        4        5        6  #>  0.05031 -0.05184 -0.05683  0.01537  0.09554 -0.05255  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -4.72947    0.06677  -70.84 2.38e-07 *** #> x            0.25630    0.01714   14.95 0.000117 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.07172 on 4 degrees of freedom #> Multiple R-squared:  0.9824,\tAdjusted R-squared:  0.978  #> F-statistic: 223.5 on 1 and 4 DF,  p-value: 0.0001166 #>  #>  #> $`T:0:1` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>         1         2         3         4         5  #> -0.001025 -0.002789 -0.027026  0.066520 -0.035679  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -5.13267    0.06215  -82.59 3.91e-06 *** #> x            0.31192    0.01465   21.29 0.000227 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.04632 on 3 degrees of freedom #> Multiple R-squared:  0.9934,\tAdjusted R-squared:  0.9912  #> F-statistic: 453.4 on 1 and 3 DF,  p-value: 0.0002266 #>  #>  #> $`D:0.24:1` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>          1          2          3          4          5  #> -7.669e-05 -1.408e-02 -3.848e-04  4.333e-02 -2.878e-02  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -4.21928    0.05113  -82.52 3.92e-06 *** #> x            0.18990    0.00984   19.30 0.000304 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.03112 on 3 degrees of freedom #> Multiple R-squared:  0.992,\tAdjusted R-squared:  0.9893  #> F-statistic: 372.4 on 1 and 3 DF,  p-value: 0.0003039 #>  #>  #> $`R:0.24:1` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>         1         2         3         4         5         6  #>  0.001099 -0.011307  0.012425 -0.004436  0.011329 -0.009110  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -4.263086   0.034202 -124.64 2.48e-08 *** #> x            0.053229   0.002711   19.63 3.97e-05 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.01134 on 4 degrees of freedom #> Multiple R-squared:  0.9897,\tAdjusted R-squared:  0.9872  #> F-statistic: 385.5 on 1 and 4 DF,  p-value: 3.968e-05 #>  #>  #> $`T:0.24:1` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>        1        2        3        4        5        6  #>  0.05437 -0.05759 -0.05606  0.02914  0.06841 -0.03827  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -4.44178    0.07370  -60.27 4.54e-07 *** #> x            0.21205    0.01531   13.85 0.000158 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.06405 on 4 degrees of freedom #> Multiple R-squared:  0.9796,\tAdjusted R-squared:  0.9745  #> F-statistic: 191.8 on 1 and 4 DF,  p-value: 0.0001576 #>  #>  #> $`D:0.49:1` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>        1        2        3        4        5        6  #>  0.02771 -0.05023 -0.05527  0.10339  0.02140 -0.04700  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -3.67930    0.08075 -45.564 1.39e-06 *** #> x            0.13510    0.01678   8.052  0.00129 **  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.07018 on 4 degrees of freedom #> Multiple R-squared:  0.9419,\tAdjusted R-squared:  0.9274  #> F-statistic: 64.84 on 1 and 4 DF,  p-value: 0.001291 #>  #>  #> $`R:0.49:1` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>       Min        1Q    Median        3Q       Max  #> -0.011759 -0.008320  0.001372  0.008141  0.009857  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -4.949090   0.012094 -409.23 1.44e-14 *** #> x            0.134500   0.001542   87.22 1.53e-10 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.009994 on 6 degrees of freedom #> Multiple R-squared:  0.9992,\tAdjusted R-squared:  0.9991  #> F-statistic:  7607 on 1 and 6 DF,  p-value: 1.53e-10 #>  #>  #> $`T:0.49:1` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>         1         2         3         4         5  #>  0.003371 -0.019480 -0.008315  0.061583 -0.037160  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -4.92841    0.05814  -84.77 3.62e-06 *** #> x            0.29112    0.01370   21.24 0.000228 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.04333 on 3 degrees of freedom #> Multiple R-squared:  0.9934,\tAdjusted R-squared:  0.9912  #> F-statistic: 451.3 on 1 and 3 DF,  p-value: 0.0002282 #>  #>  #> $`D:0.98:1` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>        1        2        3        4        5  #>  0.03455 -0.05987 -0.04096  0.12332 -0.05704  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -5.09252    0.12227  -41.65 3.05e-05 *** #> x            0.31756    0.02882   11.02   0.0016 **  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.09113 on 3 degrees of freedom #> Multiple R-squared:  0.9759,\tAdjusted R-squared:  0.9679  #> F-statistic: 121.4 on 1 and 3 DF,  p-value: 0.001601 #>  #>  #> $`R:0.98:1` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>         1         2         3         4         5         6  #>  0.008955 -0.017095  0.013025 -0.024859  0.034249 -0.014274  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -4.94295    0.05811  -85.07 1.14e-07 *** #> x            0.09504    0.00602   15.79 9.40e-05 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.02518 on 4 degrees of freedom #> Multiple R-squared:  0.9842,\tAdjusted R-squared:  0.9803  #> F-statistic: 249.3 on 1 and 4 DF,  p-value: 9.404e-05 #>  #>  #> $`T:0.98:1` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>        1        2        3        4        5        6  #>  0.07048 -0.02981 -0.08960 -0.03388  0.10342 -0.02060  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -5.08196    0.07527  -67.51 2.88e-07 *** #> x            0.30095    0.01933   15.57 9.93e-05 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.08086 on 4 degrees of freedom #> Multiple R-squared:  0.9838,\tAdjusted R-squared:  0.9797  #> F-statistic: 242.4 on 1 and 4 DF,  p-value: 9.933e-05 #>  #>  #> $`D:1.95:1` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>        1        2        3        4        5  #>  0.03961 -0.06832 -0.06293  0.17238 -0.08074  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -5.12463    0.16691 -30.703 7.59e-05 *** #> x            0.33108    0.03934   8.416  0.00352 **  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.1244 on 3 degrees of freedom #> Multiple R-squared:  0.9594,\tAdjusted R-squared:  0.9458  #> F-statistic: 70.82 on 1 and 3 DF,  p-value: 0.00352 #>  #>  #> $`R:1.95:1` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>       Min        1Q    Median        3Q       Max  #> -0.017386 -0.009382  0.003171  0.004679  0.021066  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -5.011950   0.022290 -224.85 5.22e-13 *** #> x            0.095080   0.002074   45.84 7.22e-09 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.01344 on 6 degrees of freedom #> Multiple R-squared:  0.9972,\tAdjusted R-squared:  0.9967  #> F-statistic:  2101 on 1 and 6 DF,  p-value: 7.219e-09 #>  #>  #> $`T:1.95:1` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>        1        2        3        4        5        6  #>  0.07448 -0.03023 -0.09412 -0.04469  0.12026 -0.02570  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -4.96669    0.08384  -59.24 4.86e-07 *** #> x            0.28704    0.02153   13.33 0.000183 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.09006 on 4 degrees of freedom #> Multiple R-squared:  0.978,\tAdjusted R-squared:  0.9725  #> F-statistic: 177.8 on 1 and 4 DF,  p-value: 0.0001829 #>  #>  #> $`D:3.91:1` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>        1        2        3        4        5  #>  0.04145 -0.05891 -0.04846  0.10785 -0.04193  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -5.00026    0.11205  -44.62 2.48e-05 *** #> x            0.30800    0.02641   11.66  0.00135 **  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.08352 on 3 degrees of freedom #> Multiple R-squared:  0.9784,\tAdjusted R-squared:  0.9712  #> F-statistic:   136 on 1 and 3 DF,  p-value: 0.001355 #>  #>  #> $`R:3.91:1` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>          1          2          3          4          5          6  #>  0.0071323 -0.0137318  0.0160051 -0.0141904 -0.0003689  0.0051537  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -4.875698   0.037381 -130.43 2.07e-08 *** #> x            0.081489   0.003215   25.34 1.44e-05 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.01345 on 4 degrees of freedom #> Multiple R-squared:  0.9938,\tAdjusted R-squared:  0.9923  #> F-statistic: 642.3 on 1 and 4 DF,  p-value: 1.439e-05 #>  #>  #> $`T:3.91:1` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>         1         2         3         4         5         6  #>  0.056140 -0.041372 -0.033524 -0.041424  0.068207 -0.008028  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -4.94114    0.05187  -95.25 7.28e-08 *** #> x            0.27983    0.01332   21.01 3.03e-05 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.05572 on 4 degrees of freedom #> Multiple R-squared:  0.991,\tAdjusted R-squared:  0.9888  #> F-statistic: 441.4 on 1 and 4 DF,  p-value: 3.034e-05 #>  #>  #> $`D:7.81:1` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>        1        2        3        4        5  #>  0.04370 -0.06193 -0.06219  0.13537 -0.05495  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -4.81930    0.13628 -35.362 4.97e-05 *** #> x            0.28795    0.03212   8.964  0.00293 **  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.1016 on 3 degrees of freedom #> Multiple R-squared:  0.964,\tAdjusted R-squared:  0.952  #> F-statistic: 80.36 on 1 and 3 DF,  p-value: 0.00293 #>  #>  #> $`R:7.81:1` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>       Min        1Q    Median        3Q       Max  #> -0.016088 -0.008101  0.002653  0.005409  0.019049  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -4.90382    0.02074 -236.46 3.86e-13 *** #> x            0.09002    0.00193   46.65 6.50e-09 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.01251 on 6 degrees of freedom #> Multiple R-squared:  0.9973,\tAdjusted R-squared:  0.9968  #> F-statistic:  2176 on 1 and 6 DF,  p-value: 6.5e-09 #>  #>  #> $`T:7.81:1` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>        1        2        3        4        5  #>  0.03653 -0.03329 -0.09296  0.13967 -0.04995  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -5.16836    0.14090 -36.681 4.46e-05 *** #> x            0.31098    0.03321   9.364  0.00258 **  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.105 on 3 degrees of freedom #> Multiple R-squared:  0.9669,\tAdjusted R-squared:  0.9559  #> F-statistic: 87.69 on 1 and 3 DF,  p-value: 0.002579 #>  #>  #> $`D:15.63:1` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>        1        2        3        4        5        6  #>  0.03819 -0.08467 -0.06913  0.18531 -0.01552 -0.05419  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -4.81968    0.12982 -37.127 3.14e-06 *** #> x            0.25639    0.02697   9.506 0.000684 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.1128 on 4 degrees of freedom #> Multiple R-squared:  0.9576,\tAdjusted R-squared:  0.947  #> F-statistic: 90.37 on 1 and 4 DF,  p-value: 0.0006835 #>  #>  #> $`R:15.63:1` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>          1          2          3          4          5          6  #> -0.0008624 -0.0009698 -0.0111276  0.0112378  0.0190986 -0.0173765  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -5.071201   0.045700 -110.97 3.95e-08 *** #> x            0.105468   0.003622   29.12 8.28e-06 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.01515 on 4 degrees of freedom #> Multiple R-squared:  0.9953,\tAdjusted R-squared:  0.9941  #> F-statistic: 847.7 on 1 and 4 DF,  p-value: 8.284e-06 #>  #>  #> $`T:15.63:1` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>         1         2         3         4         5         6  #> -0.025215 -0.068095  0.180830 -0.062721 -0.018590 -0.006208  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -5.41597    0.14155 -38.261 2.79e-06 *** #> x            0.24355    0.02458   9.909 0.000582 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.1028 on 4 degrees of freedom #> Multiple R-squared:  0.9609,\tAdjusted R-squared:  0.9511  #> F-statistic: 98.18 on 1 and 4 DF,  p-value: 0.0005823 #>  #>  #> $`D:31.25:1` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>         1         2         3         4         5         6  #>  0.039057 -0.032029 -0.031757 -0.005204  0.038508 -0.008576  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -5.522745   0.082737  -66.75 3.02e-07 *** #> x            0.238139   0.008572   27.78 9.99e-06 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.03586 on 4 degrees of freedom #> Multiple R-squared:  0.9948,\tAdjusted R-squared:  0.9936  #> F-statistic: 771.8 on 1 and 4 DF,  p-value: 9.985e-06 #>  #>  #> $`R:31.25:1` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>          1          2          3          4          5          6  #>  0.0035192 -0.0193741  0.0294765 -0.0146190  0.0007089  0.0002885  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -4.963300   0.026399 -188.01 4.80e-09 *** #> x            0.118203   0.004584   25.79 1.34e-05 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.01918 on 4 degrees of freedom #> Multiple R-squared:  0.994,\tAdjusted R-squared:  0.9925  #> F-statistic: 664.9 on 1 and 4 DF,  p-value: 1.344e-05 #>  #>  #> $`T:31.25:1` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>         1         2         3         4         5         6         7  #>  0.032700 -0.032491 -0.024069  0.008003  0.017211  0.004100 -0.005454  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -6.667356   0.066666 -100.01 1.89e-09 *** #> x            0.247512   0.004714   52.51 4.74e-08 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.02494 on 5 degrees of freedom #> Multiple R-squared:  0.9982,\tAdjusted R-squared:  0.9978  #> F-statistic:  2757 on 1 and 5 DF,  p-value: 4.738e-08 #>  #>  #> $`D:62.5:1` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>        1        2        3        4        5        6  #>  0.01034 -0.00617 -0.01032 -0.00669  0.01731 -0.00447  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -5.423423   0.063975  -84.77 1.16e-07 *** #> x            0.114152   0.002966   38.48 2.72e-06 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.01241 on 4 degrees of freedom #> Multiple R-squared:  0.9973,\tAdjusted R-squared:  0.9966  #> F-statistic:  1481 on 1 and 4 DF,  p-value: 2.723e-06 #>  #>  #> $`R:62.5:1` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>         1         2         3         4         5  #> -0.027990  0.031236 -0.002483  0.023220 -0.023983  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -4.913180   0.060395  -81.35 4.09e-06 *** #> x            0.107828   0.009797   11.01  0.00161 **  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.03098 on 3 degrees of freedom #> Multiple R-squared:  0.9758,\tAdjusted R-squared:  0.9678  #> F-statistic: 121.1 on 1 and 3 DF,  p-value: 0.001606 #>  #>  #> $`T:62.5:1` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>         1         2         3         4         5         6  #>  0.008565 -0.071112  0.049882  0.057217 -0.022459 -0.022093  #>  #> Coefficients: #>             Estimate Std. Error  t value Pr(>|t|)     #> (Intercept) -4.71910    0.03945 -119.620 2.93e-08 *** #> x            0.07968    0.01303    6.115  0.00362 **  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.05451 on 4 degrees of freedom #> Multiple R-squared:  0.9034,\tAdjusted R-squared:  0.8792  #> F-statistic: 37.39 on 1 and 4 DF,  p-value: 0.003622 #>  #>  #> $`D:125:1` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>         1         2         3         4         5  #> -0.007294  0.004016  0.007028  0.003071 -0.006821  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -4.681876   0.008003 -585.01 1.10e-08 *** #> x            0.084000   0.002413   34.81 5.21e-05 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.007631 on 3 degrees of freedom #> Multiple R-squared:  0.9975,\tAdjusted R-squared:  0.9967  #> F-statistic:  1212 on 1 and 3 DF,  p-value: 5.212e-05 #>  #>  #> $`R:125:1` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>         1         2         3         4         5         6  #>  0.024298 -0.044181 -0.007299  0.019532  0.038064 -0.030415  #>  #> Coefficients: #>              Estimate Std. Error  t value Pr(>|t|)     #> (Intercept) -4.803308   0.034050 -141.067 1.51e-08 *** #> x            0.068479   0.008743    7.832  0.00143 **  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.03658 on 4 degrees of freedom #> Multiple R-squared:  0.9388,\tAdjusted R-squared:  0.9235  #> F-statistic: 61.34 on 1 and 4 DF,  p-value: 0.001435 #>  #>  #> $`T:125:1` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>         1         2         3         4         5  #> -0.006979  0.027046 -0.056712  0.060201 -0.023557  #>  #> Coefficients: #>             Estimate Std. Error  t value Pr(>|t|)     #> (Intercept) -4.82133    0.04044 -119.233  1.3e-06 *** #> x            0.08376    0.01651    5.074   0.0148 *   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.0522 on 3 degrees of freedom #> Multiple R-squared:  0.8956,\tAdjusted R-squared:  0.8608  #> F-statistic: 25.74 on 1 and 3 DF,  p-value: 0.01479 #>  #>  #> $`D:250:1` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -0.03254 -0.01583 -0.01115  0.01002  0.05562  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -4.385786   0.024929 -175.93 2.28e-12 *** #> x            0.065001   0.004937   13.17 1.18e-05 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.03199 on 6 degrees of freedom #> Multiple R-squared:  0.9665,\tAdjusted R-squared:  0.961  #> F-statistic: 173.4 on 1 and 6 DF,  p-value: 1.185e-05 #>  #>  #> $`R:250:1` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>        1        2        3        4        5  #> -0.01911 -0.01091  0.06034 -0.01151 -0.01881  #>  #> Coefficients: #>             Estimate Std. Error  t value Pr(>|t|)     #> (Intercept) -4.40374    0.03037 -145.004 7.23e-07 *** #> x            0.07185    0.01240    5.795   0.0102 *   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.03921 on 3 degrees of freedom #> Multiple R-squared:  0.918,\tAdjusted R-squared:  0.8906  #> F-statistic: 33.58 on 1 and 3 DF,  p-value: 0.01022 #>  #>  #> $`T:250:1` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -0.05531 -0.01591  0.01044  0.01500  0.05691  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -4.586043   0.030760  -149.1 6.14e-12 *** #> x            0.062109   0.006091    10.2 5.18e-05 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.03948 on 6 degrees of freedom #> Multiple R-squared:  0.9454,\tAdjusted R-squared:  0.9363  #> F-statistic:   104 on 1 and 6 DF,  p-value: 5.184e-05 #>  #>  #> $`D:0:2` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>        1        2        3        4        5  #> -0.02690 -0.06984  0.11315  0.09083 -0.10724  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -4.76605    0.18531 -25.719 0.000129 *** #> x            0.27655    0.03566   7.754 0.004461 **  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.1128 on 3 degrees of freedom #> Multiple R-squared:  0.9525,\tAdjusted R-squared:  0.9366  #> F-statistic: 60.13 on 1 and 3 DF,  p-value: 0.004461 #>  #>  #> $`R:0:2` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>        1        2        3        4        5        6  #>  0.05500 -0.05217 -0.06972  0.02605  0.09073 -0.04989  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -4.56440    0.06905  -66.10 3.14e-07 *** #> x            0.24070    0.01773   13.57  0.00017 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.07417 on 4 degrees of freedom #> Multiple R-squared:  0.9788,\tAdjusted R-squared:  0.9734  #> F-statistic: 184.3 on 1 and 4 DF,  p-value: 0.0001705 #>  #>  #> $`T:0:2` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>        1        2        3        4        5  #>  0.03684 -0.03070 -0.03457  0.01388  0.01455  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -4.56724    0.03781 -120.78 1.25e-06 *** #> x            0.26170    0.01140   22.95 0.000181 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.03605 on 3 degrees of freedom #> Multiple R-squared:  0.9943,\tAdjusted R-squared:  0.9925  #> F-statistic: 526.9 on 1 and 3 DF,  p-value: 0.0001811 #>  #>  #> $`D:0.24:2` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>         1         2         3         4         5  #>  0.022436 -0.020254 -0.022358  0.015734  0.004442  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -4.468380   0.038893 -114.89 1.45e-06 *** #> x            0.209744   0.007485   28.02 9.98e-05 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.02367 on 3 degrees of freedom #> Multiple R-squared:  0.9962,\tAdjusted R-squared:  0.9949  #> F-statistic: 785.2 on 1 and 3 DF,  p-value: 9.977e-05 #>  #>  #> $`R:0.24:2` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>       Min        1Q    Median        3Q       Max  #> -0.013773 -0.005455  0.001812  0.004471  0.012121  #>  #> Coefficients: #>               Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -4.2082601  0.0076499 -550.11  < 2e-16 *** #> x            0.0430988  0.0005655   76.21 2.47e-16 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.007629 on 11 degrees of freedom #> Multiple R-squared:  0.9981,\tAdjusted R-squared:  0.9979  #> F-statistic:  5809 on 1 and 11 DF,  p-value: 2.469e-16 #>  #>  #> $`T:0.24:2` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>        1        2        3        4        5        6  #>  0.04376 -0.01805 -0.05928 -0.03032  0.09189 -0.02800  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -4.15735    0.05870  -70.83 2.38e-07 *** #> x            0.20157    0.01507   13.37 0.000181 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.06305 on 4 degrees of freedom #> Multiple R-squared:  0.9781,\tAdjusted R-squared:  0.9727  #> F-statistic: 178.9 on 1 and 4 DF,  p-value: 0.0001808 #>  #>  #> $`D:0.49:2` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>        1        2        3        4        5        6  #>  0.06723 -0.14354 -0.09301  0.24174  0.03357 -0.10598  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -5.17264    0.18603 -27.805 9.95e-06 *** #> x            0.29778    0.03865   7.704  0.00153 **  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.1617 on 4 degrees of freedom #> Multiple R-squared:  0.9369,\tAdjusted R-squared:  0.9211  #> F-statistic: 59.36 on 1 and 4 DF,  p-value: 0.001527 #>  #>  #> $`R:0.49:2` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>       Min        1Q    Median        3Q       Max  #> -0.022325 -0.008193  0.003092  0.008815  0.014001  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -4.651420   0.009603 -484.37  < 2e-16 *** #> x            0.074900   0.001351   55.43 1.25e-11 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.01227 on 8 degrees of freedom #> Multiple R-squared:  0.9974,\tAdjusted R-squared:  0.9971  #> F-statistic:  3072 on 1 and 8 DF,  p-value: 1.246e-11 #>  #>  #> $`T:0.49:2` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>         1         2         3         4         5  #>  0.043383 -0.033646 -0.053727  0.034863  0.009128  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -4.17220    0.05138  -81.20 4.12e-06 *** #> x            0.21679    0.01549   13.99  0.00079 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.04899 on 3 degrees of freedom #> Multiple R-squared:  0.9849,\tAdjusted R-squared:  0.9799  #> F-statistic: 195.8 on 1 and 3 DF,  p-value: 0.0007901 #>  #>  #> $`D:0.98:2` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>        1        2        3        4        5  #>  0.07164 -0.08815 -0.09670  0.17129 -0.05808  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  -5.1223     0.1816 -28.206 9.78e-05 *** #> x             0.3139     0.0428   7.334  0.00524 **  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.1354 on 3 degrees of freedom #> Multiple R-squared:  0.9472,\tAdjusted R-squared:  0.9296  #> F-statistic: 53.79 on 1 and 3 DF,  p-value: 0.005237 #>  #>  #> $`R:0.98:2` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>         1         2         3         4         5         6  #>  0.005913  0.001958 -0.006451 -0.018774  0.019504 -0.002150  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -4.785244   0.032994 -145.03 1.36e-08 *** #> x            0.072948   0.003418   21.34 2.85e-05 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.0143 on 4 degrees of freedom #> Multiple R-squared:  0.9913,\tAdjusted R-squared:  0.9891  #> F-statistic: 455.4 on 1 and 4 DF,  p-value: 2.851e-05 #>  #>  #> $`T:0.98:2` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>         1         2         3         4         5  #>  0.039113 -0.034204 -0.042982  0.032121  0.005951  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -4.75842    0.04537 -104.88 1.91e-06 *** #> x            0.29646    0.01368   21.67 0.000215 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.04326 on 3 degrees of freedom #> Multiple R-squared:  0.9937,\tAdjusted R-squared:  0.9915  #> F-statistic: 469.6 on 1 and 3 DF,  p-value: 0.000215 #>  #>  #> $`D:1.95:2` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>        1        2        3        4        5        6  #>  0.03662 -0.09391 -0.07322  0.19416  0.02388 -0.08753  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -5.02885    0.14261 -35.263 3.86e-06 *** #> x            0.28469    0.02963   9.608 0.000656 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.1239 on 4 degrees of freedom #> Multiple R-squared:  0.9585,\tAdjusted R-squared:  0.9481  #> F-statistic: 92.32 on 1 and 4 DF,  p-value: 0.0006559 #>  #>  #> $`R:1.95:2` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>         1         2         3         4         5  #> -0.002388 -0.011156  0.019007  0.005008 -0.010471  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -4.133639   0.037114 -111.38  1.6e-06 *** #> x            0.053219   0.004568   11.65  0.00136 **  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.01445 on 3 degrees of freedom #> Multiple R-squared:  0.9784,\tAdjusted R-squared:  0.9712  #> F-statistic: 135.7 on 1 and 3 DF,  p-value: 0.001359 #>  #>  #> $`T:1.95:2` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>        1        2        3        4        5  #>  0.05249 -0.03618 -0.06307  0.02472  0.02204  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -4.44817    0.05789  -76.84 4.86e-06 *** #> x            0.26051    0.01745   14.93 0.000653 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.05519 on 3 degrees of freedom #> Multiple R-squared:  0.9867,\tAdjusted R-squared:  0.9823  #> F-statistic: 222.8 on 1 and 3 DF,  p-value: 0.0006526 #>  #>  #> $`D:3.91:2` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>         1         2         3         4         5  #>  0.036831 -0.033926 -0.040464  0.035382  0.002177  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -5.17053    0.05693  -90.82 2.94e-06 *** #> x            0.31192    0.01342   23.25 0.000174 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.04243 on 3 degrees of freedom #> Multiple R-squared:  0.9945,\tAdjusted R-squared:  0.9926  #> F-statistic: 540.4 on 1 and 3 DF,  p-value: 0.0001744 #>  #>  #> $`R:3.91:2` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>         1         2         3         4         5  #> -0.004041  0.002173  0.003932  0.001778 -0.003843  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -4.641333   0.010944  -424.1 2.89e-08 *** #> x            0.062779   0.001347    46.6 2.18e-05 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.00426 on 3 degrees of freedom #> Multiple R-squared:  0.9986,\tAdjusted R-squared:  0.9982  #> F-statistic:  2172 on 1 and 3 DF,  p-value: 2.175e-05 #>  #>  #> $`T:3.91:2` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>         1         2         3         4         5  #>  0.046844 -0.037156 -0.057482  0.039056  0.008737  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -4.59370    0.05576  -82.38 3.94e-06 *** #> x            0.27816    0.01681   16.54 0.000481 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.05317 on 3 degrees of freedom #> Multiple R-squared:  0.9892,\tAdjusted R-squared:  0.9855  #> F-statistic: 273.7 on 1 and 3 DF,  p-value: 0.0004807 #>  #>  #> $`D:7.81:2` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>        1        2        3        4        5  #>  0.05848 -0.08452 -0.07052  0.16070 -0.06413  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -4.57258    0.16518 -27.683 0.000103 *** #> x            0.24836    0.03893   6.379 0.007799 **  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.1231 on 3 degrees of freedom #> Multiple R-squared:  0.9313,\tAdjusted R-squared:  0.9085  #> F-statistic: 40.69 on 1 and 3 DF,  p-value: 0.007799 #>  #>  #> $`R:7.81:2` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>         1         2         3         4         5  #> -0.006984 -0.017367  0.035309  0.009422 -0.020379  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -4.958416   0.067989  -72.93 5.68e-06 *** #> x            0.090425   0.008369   10.80   0.0017 **  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.02646 on 3 degrees of freedom #> Multiple R-squared:  0.9749,\tAdjusted R-squared:  0.9666  #> F-statistic: 116.7 on 1 and 3 DF,  p-value: 0.001696 #>  #>  #> $`T:7.81:2` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>         1         2         3         4         5  #>  0.014918 -0.033567  0.000835  0.039361 -0.021547  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -3.78947    0.04492  -84.35 3.67e-06 *** #> x            0.16627    0.01059   15.70 0.000561 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.03348 on 3 degrees of freedom #> Multiple R-squared:  0.988,\tAdjusted R-squared:  0.984  #> F-statistic: 246.6 on 1 and 3 DF,  p-value: 0.0005614 #>  #>  #> $`D:15.63:2` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>        1        2        3        4        5        6  #>  0.03705 -0.06309 -0.12273  0.23324 -0.03119 -0.05328  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -5.34919    0.16132 -33.160 4.93e-06 *** #> x            0.30080    0.03352   8.975 0.000853 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.1402 on 4 degrees of freedom #> Multiple R-squared:  0.9527,\tAdjusted R-squared:  0.9409  #> F-statistic: 80.55 on 1 and 4 DF,  p-value: 0.0008529 #>  #>  #> $`R:15.63:2` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>       Min        1Q    Median        3Q       Max  #> -0.013772 -0.006886  0.001340  0.005031  0.021072  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -4.502916   0.010813 -416.43  < 2e-16 *** #> x            0.060466   0.001205   50.17 2.76e-11 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.01095 on 8 degrees of freedom #> Multiple R-squared:  0.9968,\tAdjusted R-squared:  0.9964  #> F-statistic:  2517 on 1 and 8 DF,  p-value: 2.758e-11 #>  #>  #> $`T:15.63:2` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>         1         2         3         4         5         6  #>  0.029463 -0.015157 -0.044274  0.003571  0.038993 -0.012596  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -5.129049   0.047440 -108.12 4.39e-08 *** #> x            0.252260   0.008237   30.62 6.77e-06 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.03446 on 4 degrees of freedom #> Multiple R-squared:  0.9958,\tAdjusted R-squared:  0.9947  #> F-statistic: 937.8 on 1 and 4 DF,  p-value: 6.774e-06 #>  #>  #> $`D:31.25:2` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>         1         2         3         4         5         6  #>  0.025175 -0.017801 -0.020285 -0.012617  0.031419 -0.005891  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -5.748082   0.058179  -98.80 6.29e-08 *** #> x            0.243646   0.006028   40.42 2.24e-06 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.02521 on 4 degrees of freedom #> Multiple R-squared:  0.9976,\tAdjusted R-squared:  0.9969  #> F-statistic:  1634 on 1 and 4 DF,  p-value: 2.238e-06 #>  #>  #> $`R:31.25:2` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>         1         2         3         4         5  #>  0.004447 -0.017367  0.023877 -0.013442  0.002485  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -5.242152   0.060551  -86.58  3.4e-06 *** #> x            0.101857   0.005995   16.99 0.000444 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.01896 on 3 degrees of freedom #> Multiple R-squared:  0.9897,\tAdjusted R-squared:  0.9863  #> F-statistic: 288.6 on 1 and 3 DF,  p-value: 0.0004442 #>  #>  #> $`T:31.25:2` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>         1         2         3         4         5         6  #>  0.021058 -0.023826 -0.010519 -0.001336  0.024241 -0.009618  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -6.282227   0.074112  -84.77 1.16e-07 *** #> x            0.191488   0.005076   37.72 2.95e-06 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.02123 on 4 degrees of freedom #> Multiple R-squared:  0.9972,\tAdjusted R-squared:  0.9965  #> F-statistic:  1423 on 1 and 4 DF,  p-value: 2.949e-06 #>  #>  #> $`D:62.5:2` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>         1         2         3         4         5         6  #>  0.010586 -0.015019 -0.005737  0.005026  0.014308 -0.009163  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -6.039366   0.070560  -85.59 1.12e-07 *** #> x            0.133819   0.003127   42.79 1.78e-06 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.01308 on 4 degrees of freedom #> Multiple R-squared:  0.9978,\tAdjusted R-squared:  0.9973  #> F-statistic:  1831 on 1 and 4 DF,  p-value: 1.782e-06 #>  #>  #> $`R:62.5:2` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>         1         2         3         4         5  #> -0.005311  0.002885  0.005147  0.002293 -0.005015  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -4.561231   0.007487 -609.21 9.75e-09 *** #> x            0.071846   0.001765   40.71 3.26e-05 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.005581 on 3 degrees of freedom #> Multiple R-squared:  0.9982,\tAdjusted R-squared:  0.9976  #> F-statistic:  1658 on 1 and 3 DF,  p-value: 3.261e-05 #>  #>  #> $`T:62.5:2` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>         1         2         3         4         5  #> -0.007294  0.004016  0.007028  0.003071 -0.006821  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -4.597876   0.005911 -777.89 4.69e-09 *** #> x            0.084000   0.002413   34.81 5.21e-05 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.007631 on 3 degrees of freedom #> Multiple R-squared:  0.9975,\tAdjusted R-squared:  0.9967  #> F-statistic:  1212 on 1 and 3 DF,  p-value: 5.212e-05 #>  #>  #> $`D:125:2` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>         1         2         3         4         5  #> -0.006984 -0.017367  0.035309  0.009422 -0.020379  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -4.958416   0.067989  -72.93 5.68e-06 *** #> x            0.090425   0.008369   10.80   0.0017 **  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.02646 on 3 degrees of freedom #> Multiple R-squared:  0.9749,\tAdjusted R-squared:  0.9666  #> F-statistic: 116.7 on 1 and 3 DF,  p-value: 0.001696 #>  #>  #> $`R:125:2` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>         1         2         3         4         5         6  #>  0.022411 -0.040044 -0.007189  0.017367  0.034955 -0.027500  #>  #> Coefficients: #>              Estimate Std. Error  t value Pr(>|t|)     #> (Intercept) -4.752491   0.038321 -124.018 2.54e-08 *** #> x            0.062455   0.007962    7.844  0.00143 **  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.03331 on 4 degrees of freedom #> Multiple R-squared:  0.939,\tAdjusted R-squared:  0.9237  #> F-statistic: 61.54 on 1 and 4 DF,  p-value: 0.001426 #>  #>  #> $`T:125:2` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>         1         2         3         4         5  #> -0.019983  0.003381  0.019776  0.030237 -0.033411  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -4.489877   0.023801 -188.64 3.28e-07 *** #> x            0.063647   0.009717    6.55  0.00723 **  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.03073 on 3 degrees of freedom #> Multiple R-squared:  0.9347,\tAdjusted R-squared:  0.9129  #> F-statistic: 42.91 on 1 and 3 DF,  p-value: 0.007234 #>  #>  #> $`D:250:2` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>         1         2         3         4         5  #>  0.006580  0.001696 -0.006655 -0.018097  0.016477  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -4.207256   0.015900 -264.61 1.19e-07 *** #> x            0.065509   0.004794   13.66 0.000848 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.01516 on 3 degrees of freedom #> Multiple R-squared:  0.9842,\tAdjusted R-squared:  0.9789  #> F-statistic: 186.7 on 1 and 3 DF,  p-value: 0.0008479 #>  #>  #> $`R:250:2` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>        1        2        3        4        5  #> -0.02283  0.04831 -0.03471  0.01581 -0.00658  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -4.56605    0.05110 -89.349 3.09e-06 *** #> x            0.08301    0.01205   6.892  0.00626 **  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.03809 on 3 degrees of freedom #> Multiple R-squared:  0.9406,\tAdjusted R-squared:  0.9208  #> F-statistic:  47.5 on 1 and 3 DF,  p-value: 0.006259 #>  #>  #> $`T:250:2` #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>        1        2        3        4        5        6  #>  0.03506 -0.06422 -0.02039  0.06265  0.01744 -0.03054  #>  #> Coefficients: #>             Estimate Std. Error  t value Pr(>|t|)     #> (Intercept) -4.37787    0.03783 -115.711 3.35e-08 *** #> x            0.09928    0.01250    7.944  0.00136 **  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.05228 on 4 degrees of freedom #> Multiple R-squared:  0.9404,\tAdjusted R-squared:  0.9255  #> F-statistic: 63.12 on 1 and 4 DF,  p-value: 0.001359 #>  #>  coef(L) #>              y0       y0_lm      mumax         lag #> D:0:1     0.018 0.012348195 0.20489854  1.83926074 #> R:0:1     0.011 0.008831178 0.25630432  0.85682072 #> T:0:1     0.009 0.005900763 0.31191925  1.35337257 #> D:0.24:1  0.023 0.014709250 0.18989888  2.35397718 #> R:0.24:1  0.017 0.014078785 0.05322855  3.54216424 #> T:0.24:1  0.016 0.011774984 0.21204548  1.44597029 #> D:0.49:1  0.031 0.025240660 0.13509722  1.52135628 #> R:0.49:1  0.009 0.007089855 0.13450009  1.77367653 #> T:0.49:1  0.011 0.007238015 0.29111544  1.43773978 #> D:0.98:1  0.010 0.006142502 0.31756203  1.53467001 #> R:0.98:1  0.009 0.007133502 0.09504288  2.44544713 #> T:0.98:1  0.008 0.006207722 0.30095478  0.84280940 #> D:1.95:1  0.010 0.005948446 0.33108133  1.56896521 #> R:1.95:1  0.009 0.006657909 0.09507972  3.17017248 #> T:1.95:1  0.009 0.006966166 0.28703658  0.89242838 #> D:3.91:1  0.010 0.006736215 0.30800048  1.28274758 #> R:3.91:1  0.010 0.007629770 0.08148875  3.31981323 #> T:3.91:1  0.009 0.007146418 0.27983373  0.82410818 #> D:7.81:1  0.012 0.008072406 0.28794897  1.37682390 #> R:7.81:1  0.009 0.007418187 0.09002548  2.14705786 #> T:7.81:1  0.009 0.005693913 0.31098355  1.47218990 #> D:15.63:1 0.012 0.008069409 0.25639239  1.54773087 #> R:15.63:1 0.010 0.006274882 0.10546795  4.41869234 #> T:15.63:1 0.009 0.004445029 0.24355111  2.89646916 #> D:31.25:1 0.014 0.003994867 0.23813934  5.26602198 #> R:31.25:1 0.010 0.006989825 0.11820348  3.02977233 #> T:31.25:1 0.010 0.001271757 0.24751212  8.33165669 #> D:62.5:1  0.011 0.004412020 0.11415189  8.00304535 #> R:62.5:1  0.009 0.007349083 0.10782755  1.87938124 #> T:62.5:1  0.009 0.008923245 0.07967661  0.10749618 #> D:125:1   0.010 0.009261622 0.08399986  0.91316728 #> R:125:1   0.009 0.008202567 0.06847905  1.35482968 #> T:125:1   0.008 0.008056028 0.08375782 -0.08332446 #> D:250:1   0.013 0.012453101 0.06500113  0.66121499 #> R:250:1   0.012 0.012231518 0.07184650 -0.26597509 #> T:250:1   0.011 0.010193109 0.06210864  1.22661516 #> D:0:2     0.014 0.008513917 0.27654723  1.79844598 #> R:0:2     0.013 0.010416112 0.24070074  0.92062666 #> T:0:2     0.013 0.010386601 0.26169927  0.85759785 #> D:0.24:2  0.020 0.011465880 0.20974366  2.65255497 #> R:0.24:2  0.017 0.014872222 0.04309883  3.10259405 #> T:0.24:2  0.019 0.015648960 0.20157002  0.96261599 #> D:0.49:2  0.009 0.005669556 0.29777802  1.55187340 #> R:0.49:2  0.011 0.009548033 0.07490036  1.88997935 #> T:0.49:2  0.019 0.015418355 0.21679102  0.96351005 #> D:0.98:2  0.010 0.005962000 0.31393257  1.64742097 #> R:0.98:2  0.010 0.008352086 0.07294759  2.46853567 #> T:0.98:2  0.011 0.008579133 0.29646046  0.83843370 #> D:1.95:2  0.011 0.006546358 0.28468758  1.82300320 #> R:1.95:2  0.018 0.016024459 0.05321911  2.18446881 #> T:1.95:2  0.015 0.011700006 0.26051234  0.95373938 #> D:3.91:2  0.009 0.005681560 0.31191925  1.47473670 #> R:3.91:2  0.012 0.009644836 0.06277920  3.48019692 #> T:3.91:2  0.013 0.010115396 0.27815520  0.90198114 #> D:7.81:2  0.016 0.010331283 0.24835941  1.76120684 #> R:7.81:2  0.010 0.007024046 0.09042528  3.90649229 #> T:7.81:2  0.028 0.022607499 0.16626824  1.28661289 #> D:15.63:2 0.008 0.004752007 0.30080497  1.73160202 #> R:15.63:2 0.013 0.011076649 0.06046648  2.64791550 #> T:15.63:2 0.011 0.005922191 0.25225990  2.45456677 #> D:31.25:2 0.012 0.003188892 0.24364624  5.43916975 #> R:31.25:2 0.010 0.005288865 0.10185696  6.25368505 #> T:31.25:2 0.011 0.001869233 0.19148771  9.25577533 #> D:62.5:2  0.008 0.002383069 0.13381865  9.04995173 #> R:62.5:2  0.011 0.010449190 0.07184650  0.71500793 #> T:62.5:2  0.010 0.010073206 0.08399986 -0.08683272 #> D:125:2   0.009 0.007024046 0.09042528  2.74132563 #> R:125:2   0.009 0.008630170 0.06245501  0.67184897 #> T:125:2   0.011 0.011222023 0.06364748 -0.31396304 #> D:250:2   0.015 0.014887160 0.06550931  0.11526718 #> R:250:2   0.012 0.010398970 0.08301448  1.72499895 #> T:250:2   0.013 0.012552110 0.09927729  0.35315817 rsquared(L) #>     D:0:1.r2     R:0:1.r2     T:0:1.r2  D:0.24:1.r2  R:0.24:1.r2  T:0.24:1.r2  #>    0.9832876    0.9824181    0.9934273    0.9920096    0.9897308    0.9795705  #>  D:0.49:1.r2  R:0.49:1.r2  T:0.49:1.r2  D:0.98:1.r2  R:0.98:1.r2  T:0.98:1.r2  #>    0.9418965    0.9992118    0.9933967    0.9758880    0.9842060    0.9837687  #>  D:1.95:1.r2  R:1.95:1.r2  T:1.95:1.r2  D:3.91:1.r2  R:3.91:1.r2  T:3.91:1.r2  #>    0.9593622    0.9971530    0.9779951    0.9784173    0.9938112    0.9910183  #>  D:7.81:1.r2  R:7.81:1.r2  T:7.81:1.r2 D:15.63:1.r2 R:15.63:1.r2 T:15.63:1.r2  #>    0.9640095    0.9972508    0.9669188    0.9576123    0.9953037    0.9608546  #> D:31.25:1.r2 R:31.25:1.r2 T:31.25:1.r2  D:62.5:1.r2  R:62.5:1.r2  T:62.5:1.r2  #>    0.9948442    0.9940203    0.9981896    0.9973064    0.9758310    0.9033606  #>   D:125:1.r2   R:125:1.r2   T:125:1.r2   D:250:1.r2   R:250:1.r2   T:250:1.r2  #>    0.9975305    0.9387857    0.8956263    0.9665499    0.9179874    0.9454368  #>     D:0:2.r2     R:0:2.r2     T:0:2.r2  D:0.24:2.r2  R:0.24:2.r2  T:0.24:2.r2  #>    0.9524807    0.9787556    0.9943384    0.9961940    0.9981098    0.9781243  #>  D:0.49:2.r2  R:0.49:2.r2  T:0.49:2.r2  D:0.98:2.r2  R:0.98:2.r2  T:0.98:2.r2  #>    0.9368668    0.9974027    0.9849125    0.9471733    0.9912935    0.9936525  #>  D:1.95:2.r2  R:1.95:2.r2  T:1.95:2.r2  D:3.91:2.r2  R:3.91:2.r2  T:3.91:2.r2  #>    0.9584714    0.9783713    0.9867135    0.9944789    0.9986206    0.9891576  #>  D:7.81:2.r2  R:7.81:2.r2  T:7.81:2.r2 D:15.63:2.r2 R:15.63:2.r2 T:15.63:2.r2  #>    0.9313411    0.9749470    0.9879793    0.9526920    0.9968320    0.9957528  #> D:31.25:2.r2 R:31.25:2.r2 T:31.25:2.r2  D:62.5:2.r2  R:62.5:2.r2  T:62.5:2.r2  #>    0.9975580    0.9897131    0.9971970    0.9978206    0.9981933    0.9975305  #>   D:125:2.r2   R:125:2.r2   T:125:2.r2   D:250:2.r2   R:250:2.r2   T:250:2.r2  #>    0.9749470    0.9389642    0.9346510    0.9841880    0.9405925    0.9404008   results <- results(L)  library(lattice) xyplot(mumax ~ conc|strain, data=results)  # }"},{"path":"http://tpetzoldt.github.io/growthrates/reference/all_growthmodels.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Nonlinear Growth Models to Data Frame — all_growthmodels","title":"Fit Nonlinear Growth Models to Data Frame — all_growthmodels","text":"Determine maximum growth rates nonlinear fits series experiments.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/all_growthmodels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Nonlinear Growth Models to Data Frame — all_growthmodels","text":"","code":"all_growthmodels(...)  # S3 method for class 'formula' all_growthmodels(   formula,   data,   p,   lower = -Inf,   upper = Inf,   which = names(p),   FUN = NULL,   method = \"Marq\",   transform = c(\"none\", \"log\"),   ...,   subset = NULL,   ncores = detectCores(logical = FALSE) )  # S3 method for class '`function`' all_growthmodels(   FUN,   p,   data,   grouping = NULL,   time = \"time\",   y = \"value\",   lower = -Inf,   upper = Inf,   which = names(p),   method = \"Marq\",   transform = c(\"none\", \"log\"),   ...,   ncores = detectCores(logical = FALSE) )"},{"path":"http://tpetzoldt.github.io/growthrates/reference/all_growthmodels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Nonlinear Growth Models to Data Frame — all_growthmodels","text":"... generic parameters, including parameters passed optimizer. formula model formula specifying dependent, independent grouping variables form: dependent ~ independent | group1 + group2 + .... data data frame observational data. p named vector start parameters initial values growth model. lower lower bound parameter vector. upper upper bound parameter vector. vector parameter names fitted. FUN function growth model fitted. method character vector specifying optimization algorithm. transform fit model non-transformed log-transformed data. subset specification rows used: defaults rows. ncores number CPU cores used parallel computation. number real cores detected automatically default, fort debugging purposes wise set ncores = 1. Usage logical (hyperthreading) cores speed computation. grouping vector grouping variables defining subsets data frame. time character vector name independent variable. y character vector name dependent variable.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/all_growthmodels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Nonlinear Growth Models to Data Frame — all_growthmodels","text":"object containing parameters fits.","code":""},{"path":[]},{"path":"http://tpetzoldt.github.io/growthrates/reference/all_growthmodels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit Nonlinear Growth Models to Data Frame — all_growthmodels","text":"","code":"data(bactgrowth) splitted.data <- multisplit(value ~ time | strain + conc + replicate,                  data = bactgrowth)  ## show which experiments are in splitted.data names(splitted.data) #>  [1] \"D:0:1\"     \"R:0:1\"     \"T:0:1\"     \"D:0.24:1\"  \"R:0.24:1\"  \"T:0.24:1\"  #>  [7] \"D:0.49:1\"  \"R:0.49:1\"  \"T:0.49:1\"  \"D:0.98:1\"  \"R:0.98:1\"  \"T:0.98:1\"  #> [13] \"D:1.95:1\"  \"R:1.95:1\"  \"T:1.95:1\"  \"D:3.91:1\"  \"R:3.91:1\"  \"T:3.91:1\"  #> [19] \"D:7.81:1\"  \"R:7.81:1\"  \"T:7.81:1\"  \"D:15.63:1\" \"R:15.63:1\" \"T:15.63:1\" #> [25] \"D:31.25:1\" \"R:31.25:1\" \"T:31.25:1\" \"D:62.5:1\"  \"R:62.5:1\"  \"T:62.5:1\"  #> [31] \"D:125:1\"   \"R:125:1\"   \"T:125:1\"   \"D:250:1\"   \"R:250:1\"   \"T:250:1\"   #> [37] \"D:0:2\"     \"R:0:2\"     \"T:0:2\"     \"D:0.24:2\"  \"R:0.24:2\"  \"T:0.24:2\"  #> [43] \"D:0.49:2\"  \"R:0.49:2\"  \"T:0.49:2\"  \"D:0.98:2\"  \"R:0.98:2\"  \"T:0.98:2\"  #> [49] \"D:1.95:2\"  \"R:1.95:2\"  \"T:1.95:2\"  \"D:3.91:2\"  \"R:3.91:2\"  \"T:3.91:2\"  #> [55] \"D:7.81:2\"  \"R:7.81:2\"  \"T:7.81:2\"  \"D:15.63:2\" \"R:15.63:2\" \"T:15.63:2\" #> [61] \"D:31.25:2\" \"R:31.25:2\" \"T:31.25:2\" \"D:62.5:2\"  \"R:62.5:2\"  \"T:62.5:2\"  #> [67] \"D:125:2\"   \"R:125:2\"   \"T:125:2\"   \"D:250:2\"   \"R:250:2\"   \"T:250:2\"    ## get table from single experiment dat <- splitted.data[[\"D:0:1\"]]  fit0 <- fit_spline(dat$time, dat$value)  fit1 <- all_splines(value ~ time | strain + conc + replicate,                  data = bactgrowth, spar = 0.5)  # \\donttest{ ## these examples require some CPU power and may take a bit longer  ## initial parameters p <- c(coef(fit0), K = max(dat$value))  ## avoid negative parameters lower = c(y0 = 0, mumax = 0, K = 0)  ## fit all models fit2 <- all_growthmodels(value ~ time | strain + conc + replicate,           data = bactgrowth, FUN=grow_logistic,           p = p, lower = lower, ncores = 2)  results1 <- results(fit1) results2 <- results(fit2) plot(results1$mumax, results2$mumax, xlab=\"smooth splines\", ylab=\"logistic\")   ## experimental: nonlinear model as part of the formula  fit3 <- all_growthmodels(           value ~ grow_logistic(time, parms) | strain + conc + replicate,           data = bactgrowth, p = p, lower = lower, ncores = 2)  ## this allows also to fit to the 'global' data set or any subsets fit4 <- all_growthmodels(           value ~ grow_logistic(time, parms),           data = bactgrowth, p = p, lower = lower, ncores = 1) #> Warning: collapsing to unique 'x' values #> Warning: collapsing to unique 'x' values #> Warning: collapsing to unique 'x' values #> Warning: collapsing to unique 'x' values #> Warning: collapsing to unique 'x' values #> Warning: collapsing to unique 'x' values #> Warning: collapsing to unique 'x' values #> Warning: collapsing to unique 'x' values #> Warning: collapsing to unique 'x' values #> Warning: collapsing to unique 'x' values #> Warning: collapsing to unique 'x' values #> Warning: collapsing to unique 'x' values #> Warning: collapsing to unique 'x' values #> Warning: collapsing to unique 'x' values #> Warning: collapsing to unique 'x' values #> Warning: collapsing to unique 'x' values #> Warning: collapsing to unique 'x' values #> Warning: collapsing to unique 'x' values #> Warning: collapsing to unique 'x' values #> Warning: collapsing to unique 'x' values #> Warning: collapsing to unique 'x' values #> Warning: collapsing to unique 'x' values #> Warning: collapsing to unique 'x' values #> Warning: collapsing to unique 'x' values #> Warning: collapsing to unique 'x' values #> Warning: collapsing to unique 'x' values #> Warning: collapsing to unique 'x' values #> Warning: collapsing to unique 'x' values #> Warning: collapsing to unique 'x' values #> Warning: collapsing to unique 'x' values #> Warning: collapsing to unique 'x' values #> Warning: collapsing to unique 'x' values #> Warning: collapsing to unique 'x' values plot(fit4)   fit5 <- all_growthmodels(           value ~ grow_logistic(time, parms) | strain + conc,           data = bactgrowth, p = p, lower = lower, ncores = 2) plot(fit5)                                     # }"},{"path":"http://tpetzoldt.github.io/growthrates/reference/all_splines.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Exponential Growth Model with Smoothing Spline — all_splines","title":"Fit Exponential Growth Model with Smoothing Spline — all_splines","text":"Determine maximum growth rates log-linear part growth curve series experiments using smoothing splines.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/all_splines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Exponential Growth Model with Smoothing Spline — all_splines","text":"","code":"all_splines(...)  # S3 method for class 'formula' all_splines(formula, data = NULL, optgrid = 50, subset = NULL, ...)  # S3 method for class 'data.frame' all_splines(   data,   grouping = NULL,   time = \"time\",   y = \"value\",   optgrid = 50,   ... )"},{"path":"http://tpetzoldt.github.io/growthrates/reference/all_splines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Exponential Growth Model with Smoothing Spline — all_splines","text":"... generic parameters, including parameters passed smooth.spline, see details. formula model formula specifying dependent, independent grouping variables form: dependent ~ independent | group1 + group2 + .... data data frame observational data. optgrid number steps x-axis used searching maximum first derivative spline. default work cases, long data equally spaced. smaller number may lead non-detectable speed-, risk search trapped local minimum. subset specification rows used: defaults rows. grouping vector grouping variables defining subsets data frame. time character vectors name independent variable. y character vector name dependent variable.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/all_splines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Exponential Growth Model with Smoothing Spline — all_splines","text":"object parameters fit.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/all_splines.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit Exponential Growth Model with Smoothing Spline — all_splines","text":"method inspired algorithm Kahm et al. (2010),   different settings assumptions. moment, spline fitting   always done log-transformed data, assuming exponential growth   time point maximum first derivative. hard work done function smooth.spline package   stats, highly user configurable. Normally, smoothness   automatically determined via cross-validation. works well many cases,   whereas manual adjustment required otherwise, e.g. setting spar   fixed value \\([0,1]\\) also disables cross-validation.   typical case cross validation work , time dependent   measurements taken pseudoreplicates experimental unit.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/all_splines.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit Exponential Growth Model with Smoothing Spline — all_splines","text":"Kahm, M., Hasenbrink, G., Lichtenberg-Frate, H., Ludwig, J., Kschischo, M. 2010. grofit: Fitting Biological Growth Curves R. Journal Statistical Software, 33(7), 1-21, doi:10.18637/jss.v033.i07","code":""},{"path":[]},{"path":"http://tpetzoldt.github.io/growthrates/reference/all_splines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit Exponential Growth Model with Smoothing Spline — all_splines","text":"","code":"data(bactgrowth) L <- all_splines(value ~ time | strain + conc + replicate,                  data = bactgrowth, spar = 0.5)  #par(mfrow=c(4, 3)) plot(L)                                                                         results <- results(L) xyplot(mumax ~ log(conc + 1)|strain, data=results)   ## fit splines at lower grouping levels L2 <- all_splines(value ~ time | conc + strain,                     data = bactgrowth, spar = 0.5) plot(L2)                                      ## total data set without any grouping L3 <- all_splines(value ~ time,                     data = bactgrowth, spar = 0.5) #par(mfrow=c(1, 1)) plot(L3)"},{"path":"http://tpetzoldt.github.io/growthrates/reference/antibiotic.html","id":null,"dir":"Reference","previous_headings":"","what":"Plate Reader Data of Bacterial Growth — antibiotic","title":"Plate Reader Data of Bacterial Growth — antibiotic","text":"Example data set growth experiments Pseudomonas putida tetracycline concentration gradient.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/antibiotic.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Plate Reader Data of Bacterial Growth — antibiotic","text":"Data frame following columns: time time hours. variable sample code. value bacteria concentration measured optical density. conc concentration antibiotics (Tetracycline). repl Replicate.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/antibiotic.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Plate Reader Data of Bacterial Growth — antibiotic","text":"Claudia Seiler, TU Dresden, Institute Hydrobiology.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/antibiotic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plate Reader Data of Bacterial Growth — antibiotic","text":"sample data set shows four six replicates original experiment.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/antibiotic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plate Reader Data of Bacterial Growth — antibiotic","text":"","code":"## plot data and determine growth rates data(antibiotic)  dat <- subset(antibiotic, conc==0.078 & repl==\"R4\") parms <- c(y0=0.01, mumax=0.2, K=0.5) fit <- fit_growthmodel(grow_logistic, parms, dat$time, dat$value) plot(fit); plot(fit, log=\"y\")"},{"path":"http://tpetzoldt.github.io/growthrates/reference/bactgrowth.html","id":null,"dir":"Reference","previous_headings":"","what":"Plate Reader Data of Bacterial Growth — bactgrowth","title":"Plate Reader Data of Bacterial Growth — bactgrowth","text":"Example data set growth experiments different concentrations antibiotics.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/bactgrowth.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Plate Reader Data of Bacterial Growth — bactgrowth","text":"Data frame following columns: strain identifier bacterial strain, D=donor, R=recipient, T=transconjugant. replicate replicate trial. conc concentration antibiotics (Tetracycline). time time hours. value bacteria concentration measured optical density.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/bactgrowth.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Plate Reader Data of Bacterial Growth — bactgrowth","text":"Claudia Seiler, TU Dresden, Institute Hydrobiology.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/bactgrowth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plate Reader Data of Bacterial Growth — bactgrowth","text":"rather 'difficult' data set intentionally selected make model fitting package challenging.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/bactgrowth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plate Reader Data of Bacterial Growth — bactgrowth","text":"","code":"## plot data and determine growth rates data(bactgrowth)   library(lattice) xyplot(value ~ time | strain + as.factor(conc),       data = bactgrowth, groups = replicate)"},{"path":"http://tpetzoldt.github.io/growthrates/reference/cost.html","id":null,"dir":"Reference","previous_headings":"","what":"Cost Function for Nonlinear Fits — cost","title":"Cost Function for Nonlinear Fits — cost","text":"Defines cost function residual sum squares model observational data.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/cost.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cost Function for Nonlinear Fits — cost","text":"","code":"cost(p, obs, FUN, fixed.p = NULL, transform, ...)"},{"path":"http://tpetzoldt.github.io/growthrates/reference/cost.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cost Function for Nonlinear Fits — cost","text":"p vector fitted parameters growth model. FUN function growth model fitted. fixed.p vector fixed  parameters growth model. ... additional parameters passed optimizer.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/cost.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cost Function for Nonlinear Fits — cost","text":"object class modCost, see modCost   package FME","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/cost.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cost Function for Nonlinear Fits — cost","text":"Function 'cost' implemented along lines following template, see package FME details:","code":"cost <- function(p, obs, FUN, fixed.p = NULL, ...) {   out <- FUN(obs$time, c(p, fixed.p))   modCost(out, obs, weight = \"none\", ...) }"},{"path":"http://tpetzoldt.github.io/growthrates/reference/extcoef_logistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Extended Set of Coefficients of a Logistic Growth Model — extcoef_logistic","title":"Extended Set of Coefficients of a Logistic Growth Model — extcoef_logistic","text":"Estimate model-specific derived parameters logistic growth model","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/extcoef_logistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extended Set of Coefficients of a Logistic Growth Model — extcoef_logistic","text":"","code":"extcoef_logistic(object, quantile = 0.95, time = NULL, ...)"},{"path":"http://tpetzoldt.github.io/growthrates/reference/extcoef_logistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extended Set of Coefficients of a Logistic Growth Model — extcoef_logistic","text":"object model object fited fit_growthmodel quantile fraction capacity parameter (K) quantile method time 2-valued vector search interval independent variable (time). Note: needs set manually saturation reached within observation time period taken data. ... reserved future extensions","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/extcoef_logistic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extended Set of Coefficients of a Logistic Growth Model — extcoef_logistic","text":"vector contains fitted parameters   derived characteristics (extended parameters) logistic   function.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/extcoef_logistic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extended Set of Coefficients of a Logistic Growth Model — extcoef_logistic","text":"function returns estimated parameters logistic growth model  (y0, mumax, K) series estimates time  approximate saturation.  estimates defined follows: turnpoint: time turnpoint (50% saturation) sat1: time minimum 2nd derivative sat2: time intercept steepest increase      (tangent mumax) carrying capacity K sat3: time quantile K (default 0.95)      reached function normally directly called user.  usually called indirectly coef results    extended=TRUE.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/extcoef_logistic.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Extended Set of Coefficients of a Logistic Growth Model — extcoef_logistic","text":"estimates turnpoint time approximate saturation    (sat1, sat2, sat3) may unreliable, saturation    reached within observation time period. See example .  set extended parameters exists currently standard logistic    growth model (grow_logistic).  code naming parameters preliminary may change    future versions.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/extcoef_logistic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extended Set of Coefficients of a Logistic Growth Model — extcoef_logistic","text":"","code":"## ========================================================================= ## The 'extended parameters' are usually derived ## =========================================================================  data(antibiotic)  ## fit a logistic model to a single data set dat <- subset(antibiotic, conc==0.078 & repl==\"R4\")  parms <- c(y0=0.01, mumax=0.2, K=0.5) fit <- fit_growthmodel(grow_logistic, parms, dat$time, dat$value) coef(fit, extended=TRUE) #>          y0       mumax           K   turnpoint        sat1        sat2  #>  0.01505667  0.40193712  0.45220395  8.38053668 11.65706694 13.35643933  #>        sat3  #> 15.70615819   ## fit the logistic to all data sets myData <- subset(antibiotic, repl==\"R3\") parms <- c(y0=0.01, mumax=0.2, K=0.5) all <- all_growthmodels(value ~ time | conc,                          data = myData, FUN=grow_logistic,                          p = parms, ncores = 2)   # par(mfrow=c(3,4)) plot(all)             results(all, extended=TRUE) #>        conc          y0      mumax            K turnpoint         sat1 #> 0     0.000 0.029334991 0.43545804 4.754685e-01  6.250515 9.274825e+00 #> 0.002 0.002 0.027259902 0.46653469 4.774422e-01  6.010759 8.833627e+00 #> 0.005 0.005 0.027288802 0.46419629 4.751414e-01  6.027581 8.864648e+00 #> 0.01  0.010 0.027486632 0.45515405 4.820902e-01  6.164344 9.057787e+00 #> 0.02  0.020 0.027556609 0.44897724 4.906198e-01  6.284553 9.217798e+00 #> 0.039 0.039 0.020879178 0.46785804 4.864444e-01  6.635559 9.450427e+00 #> 0.078 0.078 0.015355180 0.40381858 4.559296e-01  8.312216 1.157348e+01 #> 0.156 0.156 0.008027564 0.33717987 4.042182e-01 11.563616 1.546940e+01 #> 0.313 0.313 0.003670851 0.22588498 2.835147e-01 19.185923 2.501613e+01 #> 0.625 0.625 0.008988866 0.07656636 1.247073e-01 29.999932 6.830539e-05 #> 1.25  1.250 0.009683618 0.03294199 2.761144e+05 29.999932 6.830539e-05 #> 2.5   2.500 0.009456558 0.01928594 1.171006e+05 29.999932 6.830539e-05 #>               sat2      sat3        r2 #> 0     1.084338e+01  13.01222 0.9637041 #> 0.002 1.029769e+01  12.32207 0.9615246 #> 0.005 1.033610e+01  12.37069 0.9604411 #> 0.01  1.055846e+01  12.63345 0.9647900 #> 0.02  1.073912e+01  12.84266 0.9671718 #> 0.039 1.091036e+01  12.92900 0.9745931 #> 0.078 1.326493e+01  15.60370 0.9862631 #> 0.156 1.749517e+01  20.29615 0.9956718 #> 0.313 2.803999e+01  32.22103 0.9987675 #> 0.625 5.655880e+01  71.82804 0.9994673 #> 1.25  1.610931e+08 610.47700 0.9952760 #> 2.5   1.800042e+08 999.49884 0.9737259 ## we see that the the last 3 series (10...12) do not go into saturation ## within the observation time period.  ## We can try to extend the search range: results(all[10:12], extended=TRUE, time=c(0, 5000)) #>        conc          y0      mumax            K turnpoint      sat1      sat2 #> 0.625 0.625 0.008988866 0.07656636 1.247073e-01  33.37201  50.57221  59.49314 #> 1.25  1.250 0.009683618 0.03294199 2.761144e+05 521.09448 561.07255 581.80726 #> 2.5   2.500 0.009456558 0.01928594 1.171006e+05 846.82600 915.11192 950.52850 #>            sat3        r2 #> 0.625  71.82804 0.9994673 #> 1.25  610.47700 0.9952760 #> 2.5   999.49884 0.9737259   ## ========================================================================= ## visualisation how the 'extended parameters' are derived ## =========================================================================  # Derivatives of the logistic: #   The 1st and 2nd derivatives are internal functions of the package. #   They are used here for the visualisation of the algorithm.  deriv1 <- function(time, y0, mumax, K) {   ret <- (K*mumax*y0*(K - y0)*exp(mumax * time))/     ((K + y0 * (exp(mumax * time) - 1))^2)   unname(ret) }  deriv2 <- function(time, y0, mumax, K) {   ret <- -(K * mumax^2 * y0 * (K - y0) * exp(mumax * time) *              (-K + y0 * exp(mumax * time) + y0))/     (K + y0 * (exp(mumax * time) - 1))^3   unname(ret) } ## =========================================================================  data(bactgrowth) ## extract one growth experiment by name dat <- multisplit(bactgrowth, c(\"strain\", \"conc\", \"replicate\"))[[\"D:0:1\"]]   ## unconstraied fitting p <- c(y0 = 0.01, mumax = 0.2, K = 0.1) # start parameters fit1 <- fit_growthmodel(FUN = grow_logistic, p = p, dat$time, dat$value) summary(fit1) #>  #> Parameters: #>       Estimate Std. Error t value Pr(>|t|)     #> y0    0.017483   0.001581   11.06 9.98e-12 *** #> mumax 0.200070   0.013979   14.31 2.10e-14 *** #> K     0.099626   0.001850   53.87  < 2e-16 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.004246 on 28 degrees of freedom #>  #> Parameter correlation: #>            y0   mumax       K #> y0     1.0000 -0.8689  0.4537 #> mumax -0.8689  1.0000 -0.7048 #> K      0.4537 -0.7048  1.0000 p <- coef(fit1, extended=TRUE)  ## copy parameters to separate variables to improve readability ------------ y0 <-    p[\"y0\"] mumax <- p[\"mumax\"] K  <-    p[\"K\"] turnpoint <- p[\"turnpoint\"] sat1 <-  p[\"sat1\"]  # 2nd derivative sat2 <-  p[\"sat2\"]  # intercept between steepest increase and K sat3 <-  p[\"sat3\"]  # a given quantile of K, default 95\\%  ## show saturation values in growth curve and 1st and 2nd derivatives ------ opar <- par(no.readonly=TRUE) par(mfrow=c(3, 1), mar=c(4,4,0.2,0)) plot(fit1)  ## 95% saturation abline(h=0.95*K, col=\"magenta\", lty=\"dashed\")  ## Intercept between steepest increase and 100% saturation b <- deriv1(turnpoint, y0, mumax, K) a <- K/2 - b*turnpoint abline(a=a, b=b, col=\"orange\", lty=\"dashed\") abline(h=K, col=\"orange\", lty=\"dashed\") points(sat2, K, pch=16, col=\"orange\") points(turnpoint, K/2, pch=16, col=\"blue\")  ## sat2 is the minimum of the 2nd derivative abline(v=c(turnpoint, sat1, sat2, sat3),        col=c(\"blue\", \"grey\", \"orange\", \"magenta\"), lty=\"dashed\")  ## plot the derivatives with(dat, plot(time, deriv1(time, y0, mumax, K), type=\"l\", ylab=\"y'\")) abline(v=c(turnpoint, sat1), col=c(\"blue\", \"grey\"), lty=\"dashed\")  with(dat, plot(time, deriv2(time, y0, mumax, K), type=\"l\",  ylab=\"y''\")) abline(v=sat1, col=\"grey\", lty=\"dashed\")  par(opar)"},{"path":"http://tpetzoldt.github.io/growthrates/reference/extract.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract or Replace Parts of a 'multiple_fits' Object — [,multiple_fits,ANY,missing-method","title":"Extract or Replace Parts of a 'multiple_fits' Object — [,multiple_fits,ANY,missing-method","text":"Operators access parts 'multiple_fits' objects","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract or Replace Parts of a 'multiple_fits' Object — [,multiple_fits,ANY,missing-method","text":"","code":"# S4 method for class 'multiple_fits,ANY,missing' x[i, j, ..., drop = TRUE]  # S4 method for class 'multiple_fits,ANY,missing' x[[i, j, ...]]"},{"path":"http://tpetzoldt.github.io/growthrates/reference/extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract or Replace Parts of a 'multiple_fits' Object — [,multiple_fits,ANY,missing-method","text":"x object class multiple_fits numeric character index j NULL (compatibility uses  [ [[) ... optional arguments passed [ drop TRUE result coerced lowest possible dimension","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/extract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract or Replace Parts of a 'multiple_fits' Object — [,multiple_fits,ANY,missing-method","text":"","code":"data(bactgrowth) L <- all_splines(value ~ time | strain + conc +replicate, data=bactgrowth)  coef(L[[1]]) #>          y0       mumax  #> 0.008092251 0.298829008   plot(L[[\"R:0:2\"]])   # par(mfrow=c(2, 2)) plot(L[1:4])"},{"path":"http://tpetzoldt.github.io/growthrates/reference/fit_easylinear.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Exponential Growth Model with a Heuristic Linear Method — fit_easylinear","title":"Fit Exponential Growth Model with a Heuristic Linear Method — fit_easylinear","text":"Determine maximum growth rates log-linear part growth curve using heuristic approach similar “growth rates made easy”-method Hall et al. (2013).","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/fit_easylinear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Exponential Growth Model with a Heuristic Linear Method — fit_easylinear","text":"","code":"fit_easylinear(time, y, h = 5, quota = 0.95)"},{"path":"http://tpetzoldt.github.io/growthrates/reference/fit_easylinear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Exponential Growth Model with a Heuristic Linear Method — fit_easylinear","text":"time vector independent variable. y vector dependent variable (concentration organisms). h width window (number data). quota part window fits considered overall linear fit (relative max. growth rate)","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/fit_easylinear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Exponential Growth Model with a Heuristic Linear Method — fit_easylinear","text":"object parameters fit. lag time currently estimated intersection fit horizontal line \\(y=y_0\\), y0 first value dependent variable. intersection fit abscissa indicated y0_lm (lm linear model). identifieres assumptions may change future versions.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/fit_easylinear.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit Exponential Growth Model with a Heuristic Linear Method — fit_easylinear","text":"algorithm works follows: Fit linear regressions subsets h consecutive data     points. example \\(h=5\\), fit linear regression points     1 ... 5, 2 ... 6, 3... 7 . method seeks highest     rate exponential growth, dependent variable course     log-transformed. Find subset highest slope \\(b_{max}\\)     include also data points adjacent subsets slope     least \\(quota \\cdot b_{max}\\),     e.g. data sets least 95% maximum slope. Fit new linear model extended data window identified step 2.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/fit_easylinear.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit Exponential Growth Model with a Heuristic Linear Method — fit_easylinear","text":"Hall, BG., Acar, H, Nandipati, Barlow, M (2014) Growth Rates Made Easy. Mol. Biol. Evol. 31: 232-38, doi:10.1093/molbev/mst187","code":""},{"path":[]},{"path":"http://tpetzoldt.github.io/growthrates/reference/fit_easylinear.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit Exponential Growth Model with a Heuristic Linear Method — fit_easylinear","text":"","code":"data(bactgrowth)  splitted.data <- multisplit(bactgrowth, c(\"strain\", \"conc\", \"replicate\")) dat <- splitted.data[[1]]  plot(value ~ time, data=dat)  fit <- fit_easylinear(dat$time, dat$value)  plot(fit)  plot(fit, log=\"y\")  plot(fit, which=\"diagnostics\")   fitx <- fit_easylinear(dat$time, dat$value, h=8, quota=0.95)  plot(fit, log=\"y\") lines(fitx, pch=\"+\", col=\"blue\")   plot(fit) lines(fitx, pch=\"+\", col=\"blue\")"},{"path":"http://tpetzoldt.github.io/growthrates/reference/fit_growthmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Nonlinear Parametric Growth Model — fit_growthmodel","title":"Fit Nonlinear Parametric Growth Model — fit_growthmodel","text":"Determine maximum growth rates fitting nonlinear models.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/fit_growthmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Nonlinear Parametric Growth Model — fit_growthmodel","text":"","code":"fit_growthmodel(   FUN,   p,   time,   y,   lower = -Inf,   upper = Inf,   which = names(p),   method = \"Marq\",   transform = c(\"none\", \"log\"),   control = NULL,   ... )"},{"path":"http://tpetzoldt.github.io/growthrates/reference/fit_growthmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Nonlinear Parametric Growth Model — fit_growthmodel","text":"FUN function growth model fitted. p named vector start parameters initial values growth model. time vector independent variable. y vector dependent variable (concentration organisms). lower lower bound parameter vector (optional). upper upper bound parameter vector (optional). vector parameter names fitted. method character vector specifying optimization algorithm (see modFit). transform fit model non-transformed log-transformed data. control list control parameters optimizers. See Details. ... additional parameters passed optimizer.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/fit_growthmodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Nonlinear Parametric Growth Model — fit_growthmodel","text":"object  parameters fit.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/fit_growthmodel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit Nonlinear Parametric Growth Model — fit_growthmodel","text":"function calls modFit package FME. Syntax control parameters available options may differ, depending optimizer used, except control=list(trace=...) switches   tracing methods either TRUE, FALSE,   integer value like 0, 1, 2, 3, depending optimizer.","code":""},{"path":[]},{"path":"http://tpetzoldt.github.io/growthrates/reference/fit_growthmodel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit Nonlinear Parametric Growth Model — fit_growthmodel","text":"","code":"data(bactgrowth) splitted.data <- multisplit(bactgrowth, c(\"strain\", \"conc\", \"replicate\"))  ## get one element either by index or by name dat <- splitted.data[[1]] dat <- splitted.data[[\"D:0:1\"]]  p <- c(y0 = 0.01, mumax = 0.2, K = 0.1)  ## unconstraied fitting fit1 <- fit_growthmodel(FUN = grow_logistic, p = p, dat$time, dat$value) coef(fit1) #>        y0     mumax         K  #> 0.0174826 0.2000701 0.0996260  summary(fit1) #>  #> Parameters: #>       Estimate Std. Error t value Pr(>|t|)     #> y0    0.017483   0.001581   11.06 9.98e-12 *** #> mumax 0.200070   0.013979   14.31 2.10e-14 *** #> K     0.099626   0.001850   53.87  < 2e-16 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.004246 on 28 degrees of freedom #>  #> Parameter correlation: #>            y0   mumax       K #> y0     1.0000 -0.8689  0.4537 #> mumax -0.8689  1.0000 -0.7048 #> K      0.4537 -0.7048  1.0000  ## optional box-constraints lower <- c(y0 = 1e-6, mumax = 0,   K = 0) upper <- c(y0 = 0.05, mumax = 5,   K = 0.5) fit1 <- fit_growthmodel(   FUN = grow_logistic, p = p, dat$time, dat$value,   lower = lower, upper = upper)  plot(fit1, log=\"y\")"},{"path":"http://tpetzoldt.github.io/growthrates/reference/fit_spline.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Exponential Growth Model with Smoothing Spline — fit_spline","title":"Fit Exponential Growth Model with Smoothing Spline — fit_spline","text":"Determine maximum growth rates first derivative smoothing spline.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/fit_spline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Exponential Growth Model with Smoothing Spline — fit_spline","text":"","code":"fit_spline(time, y, optgrid = length(time), ...)"},{"path":"http://tpetzoldt.github.io/growthrates/reference/fit_spline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Exponential Growth Model with Smoothing Spline — fit_spline","text":"time vector independent variable. y vector dependent variable (concentration organisms). optgrid number steps x-axis used optimum search . algorithm. default work cases, long data equally spaced. smaller number may lead non-detectable speed-, risk search gets trapped local minimum. ... parameters passed smooth.spline, see details.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/fit_spline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Exponential Growth Model with Smoothing Spline — fit_spline","text":"object parameters fit","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/fit_spline.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit Exponential Growth Model with Smoothing Spline — fit_spline","text":"method inspired algorithm Kahm et al. (2010),   different settings assumptions. moment, spline fitting   always done log-transformed data, assuming exponential growth   time point maximum first derivative spline fit. hard work done function smooth.spline package   stats, highly user configurable. Normally, smoothness   automatically determined via cross-validation. works well many cases,   whereas manual adjustment required otherwise, e.g. setting spar   fixed value \\([0, 1]\\) also disables cross-validation.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/fit_spline.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit Exponential Growth Model with Smoothing Spline — fit_spline","text":"Kahm, M., Hasenbrink, G., Lichtenberg-Frate, H., Ludwig, J., Kschischo, M. 2010. grofit: Fitting Biological Growth Curves R. Journal Statistical Software, 33(7), 1-21, doi:10.18637/jss.v033.i07","code":""},{"path":[]},{"path":"http://tpetzoldt.github.io/growthrates/reference/fit_spline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit Exponential Growth Model with Smoothing Spline — fit_spline","text":"","code":"data(bactgrowth) splitted.data <- multisplit(bactgrowth, c(\"strain\", \"conc\", \"replicate\"))  dat <- splitted.data[[2]] time <- dat$time y    <- dat$value  ## automatic smoothing with cv res <- fit_spline(time, y)  plot(res, log=\"y\")  plot(res)  coef(res) #>          y0       mumax  #> 0.006562443 0.335991063   ## a more difficult data set dat <- splitted.data[[56]] time <- dat$time y <- dat$value  ## default parameters res <- fit_spline(time, y) plot(res, log=\"y\")   ## small optgrid, trapped in local minimum res <- fit_spline(time, y, optgrid=5) plot(res, log=\"y\")   ## manually selected smoothing parameter res <- fit_spline(time, y, spar=.5) plot(res, log=\"y\")  plot(res, ylim=c(0.005, 0.03))"},{"path":"http://tpetzoldt.github.io/growthrates/reference/function_growthmodel-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Union Class of Growth Model or Function — function_growthmodel-class","title":"Union Class of Growth Model or Function — function_growthmodel-class","text":"class union comprises parametric model functions class growthmodel ordinary functions describe time-dependent growth organisms.","code":""},{"path":[]},{"path":"http://tpetzoldt.github.io/growthrates/reference/generics.html","id":null,"dir":"Reference","previous_headings":"","what":"Additional Generic Functions — rsquared","title":"Additional Generic Functions — rsquared","text":"functions specifically defined package growthrates, generics imported.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/generics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Additional Generic Functions — rsquared","text":"","code":"rsquared(object, ...)  obs(object, ...)  results(object, ...)"},{"path":"http://tpetzoldt.github.io/growthrates/reference/generics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Additional Generic Functions — rsquared","text":"object name 'growthrate' object ... arguments passed methods","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_baranyi.html","id":null,"dir":"Reference","previous_headings":"","what":"The Baranyi and Roberts Growth Model — grow_baranyi","title":"The Baranyi and Roberts Growth Model — grow_baranyi","text":"growth model Baranyi Roberts (1995) written analytical solution system differential equations.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_baranyi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Baranyi and Roberts Growth Model — grow_baranyi","text":"","code":"grow_baranyi(time, parms)"},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_baranyi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Baranyi and Roberts Growth Model — grow_baranyi","text":"time vector time steps (independent variable). parms named parameter vector Baranyi growth model : y0 initial value abundance, mumax maximum growth rate (1/time), K carrying capacity (max. abundance), h0 parameter specifying initial physiological state     organisms (e.g. cells) consequence lag phase     (h0 = max growth rate * lag phase).","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_baranyi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Baranyi and Roberts Growth Model — grow_baranyi","text":"vector dependent variable (y).","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_baranyi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Baranyi and Roberts Growth Model — grow_baranyi","text":"version equation used package following form: $$= time + 1/mumax * log(exp(-mumax * time) + exp(-h0) - exp(-mumax * time - h0))$$ $$log(y) = log(y0) + mumax * - log(1 + (exp(mumax * ) - 1) / exp(log(K) - log(y0)))$$","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_baranyi.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Baranyi and Roberts Growth Model — grow_baranyi","text":"Baranyi, J. Roberts, T. . (1994). dynamic approach predicting bacterial growth food. International Journal Food Microbiology, 23, 277-294. Baranyi, J. Roberts, T.. (1995). Mathematics predictive microbiology. International Journal Food Microbiology, 26, 199-218.","code":""},{"path":[]},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_baranyi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Baranyi and Roberts Growth Model — grow_baranyi","text":"","code":"time <- seq(0, 30, length=200) y    <- grow_baranyi(time, c(y0=0.01, mumax=.5, K=0.1, h0=5))[,\"y\"] plot(time, y, type=\"l\")  plot(time, y, type=\"l\", log=\"y\")"},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_exponential.html","id":null,"dir":"Reference","previous_headings":"","what":"Exponential Growth Model — grow_exponential","title":"Exponential Growth Model — grow_exponential","text":"Unlimited exponential growth model.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_exponential.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exponential Growth Model — grow_exponential","text":"","code":"grow_exponential(time, parms)"},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_exponential.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exponential Growth Model — grow_exponential","text":"time vector time steps (independent variable). parms named parameter vector exponential growth model : y0 initial abundance (e.g. concentration bacterial cells). mumax maximum growth rate (1/time).","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_exponential.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exponential Growth Model — grow_exponential","text":"vector dependent variable (y).","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_exponential.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Exponential Growth Model — grow_exponential","text":"equation used : $$y = y0 * exp(mumax * time)$$","code":""},{"path":[]},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_exponential.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exponential Growth Model — grow_exponential","text":"","code":"time <- seq(0, 30, length=200) y <- grow_exponential(time, c(y0=1, mumax=0.5))[,\"y\"] plot(time, y, type=\"l\")"},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_genlogistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized Logistic Growth Model — ode_genlogistic","title":"Generalized Logistic Growth Model — ode_genlogistic","text":"Generalized logistic growth model solved differential equation.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_genlogistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized Logistic Growth Model — ode_genlogistic","text":"","code":"ode_genlogistic(time, y, parms, ...)  grow_genlogistic(time, parms, ...)"},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_genlogistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized Logistic Growth Model — ode_genlogistic","text":"time vector simulation time steps y named vector initial value system (e.g. cell concentration) parms parameters generalized logistic growth model mumax maximum growth rate (1/time) K carrying capacity (max. abundance) alpha, beta, gamma parameters determining shape growth.      Setting values one returns ordinary logistic function. ... additional parameters passed ode-function.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_genlogistic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalized Logistic Growth Model — ode_genlogistic","text":"ode_genlogistic: matrix containing simulation outputs. return value also class deSolve. grow_genlogistic: vector dependent variable (y). time time simulation y abundance organisms","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_genlogistic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generalized Logistic Growth Model — ode_genlogistic","text":"model given first derivative: $$dy/dt = mumax * y^alpha * (1-(y/K)^beta)^gamma$$ numerically integrated ('simulated') according time (t). generalized logistic according Tsoularis (2001) flexible   model covers exponential logistic growth, Richards, Gompertz, von   Bertalanffy, special cases. differential equation solved numerically, function   ode_genlogistic differential equation,   grow_genlogistic runs numerical simulation time. default version grow_genlogistic run directly compiled code,   whereas R versions ode_logistic   provided testing user.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_genlogistic.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generalized Logistic Growth Model — ode_genlogistic","text":"Tsoularis, . (2001) Analysis Logistic Growth Models. Res. Lett. Inf. Math. Sci, (2001) 2, 23-46.","code":""},{"path":[]},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_genlogistic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalized Logistic Growth Model — ode_genlogistic","text":"","code":"time <- seq(0, 30, length=200) parms <- c(mumax=0.5, K=10, alpha=1, beta=1, gamma=1) y0    <-  c(y=.1) out   <- ode(y0, time, ode_genlogistic, parms) plot(out)  out2 <- ode(y0, time, ode_genlogistic, parms = c(mumax=0.2, K=10, alpha=2, beta=1, gamma=1)) out3 <- ode(y0, time, ode_genlogistic, parms = c(mumax=0.2, K=10, alpha=1, beta=2, gamma=1)) out4 <- ode(y0, time, ode_genlogistic, parms = c(mumax=0.2, K=10, alpha=1, beta=1, gamma=2)) out5 <- ode(y0, time, ode_genlogistic, parms = c(mumax=0.2, K=10, alpha=.5, beta=1, gamma=1)) out6 <- ode(y0, time, ode_genlogistic, parms = c(mumax=0.2, K=10, alpha=1, beta=.5, gamma=1)) out7 <- ode(y0, time, ode_genlogistic, parms = c(mumax=0.3, K=10, alpha=1, beta=1, gamma=.5)) #> DLSODA-  At T (=R1), too much accuracy requested   #>       for precision of machine..  See TOLSF (=R2)  #> In above message, R1 = 19.9659, R2 = nan #>   #> Warning: Excessive precision requested.  scale up `rtol' and `atol' e.g by the factor 10 #> Warning: Returning early. Results are accurate, as far as they go plot(out, out2, out3, out4, out5, out6, out7)   ## growth with lag (cf. log_y) plot(ode(y0, time, ode_genlogistic, parms = c(mumax=1, K=10, alpha=2, beta=.8, gamma=5)))"},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_gompertz.html","id":null,"dir":"Reference","previous_headings":"","what":"Growth Model According to Gompertz — grow_gompertz","title":"Growth Model According to Gompertz — grow_gompertz","text":"Gompertz growth model written analytical solution differential   equation system.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_gompertz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Growth Model According to Gompertz — grow_gompertz","text":"","code":"grow_gompertz(time, parms)"},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_gompertz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Growth Model According to Gompertz — grow_gompertz","text":"time vector time steps (independent variable). parms named parameter vector Gompertz growth model : y0 initial value abundance, mumax maximum growth rate (1/time), K maximum abundance (carrying capacity).","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_gompertz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Growth Model According to Gompertz — grow_gompertz","text":"vector dependent variable (y)","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_gompertz.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Growth Model According to Gompertz — grow_gompertz","text":"equation used : $$y = K * exp(log(y0 / K) * exp(-mumax * time))$$","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_gompertz.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Growth Model According to Gompertz — grow_gompertz","text":"naming parameter \"mumax\" done analogy growth   models, turned consistent maximum   growth rate population. can considered bug. function   removed replaced future versions package. Please use   grow_gompertz2 instead.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_gompertz.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Growth Model According to Gompertz — grow_gompertz","text":"Tsoularis, . (2001) Analysis Logistic Growth Models.   Res. Lett. Inf. Math. Sci, (2001) 2, 23-46.","code":""},{"path":[]},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_gompertz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Growth Model According to Gompertz — grow_gompertz","text":"","code":"time <- seq(0, 30, length=200) y    <- grow_gompertz(time, c(y0=1, mumax=.2, K=10))[,\"y\"] plot(time, y, type=\"l\", ylim=c(0, 20))"},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_gompertz2.html","id":null,"dir":"Reference","previous_headings":"","what":"Growth Model According to Gompertz — grow_gompertz2","title":"Growth Model According to Gompertz — grow_gompertz2","text":"Gompertz growth model written analytical solution differential   equation system.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_gompertz2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Growth Model According to Gompertz — grow_gompertz2","text":"","code":"grow_gompertz2(time, parms)  grow_gompertz3(time, parms)"},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_gompertz2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Growth Model According to Gompertz — grow_gompertz2","text":"time vector time steps (independent variable). parms named parameter vector Gompertz growth model : y0 initial value abundance, mumax maximum growth rate (1/time), K maximum abundance (carrying capacity), lambda time lag phase 3 parameter Gompertz model .","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_gompertz2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Growth Model According to Gompertz — grow_gompertz2","text":"vector dependent variable (y)","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_gompertz2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Growth Model According to Gompertz — grow_gompertz2","text":"equation used : $$y = y0*(K/y0)^(exp(-exp((exp(1)*mumax*(lambda - time))/log(K/y0)+1)))$$ Functions grow_gompert2 grow_gompertz3 describe   sigmoidal growth exponentially decreasing intrinsic growth rate   without additional lag parameter. formula follows   reparametrization Zwietering et al (1990), parameters   biological meaning.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_gompertz2.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Growth Model According to Gompertz — grow_gompertz2","text":"Tsoularis, . (2001) Analysis Logistic Growth Models.   Res. Lett. Inf. Math. Sci, (2001) 2, 23-46. Zwietering, M. H., Jongenburger, ., Rombouts, F. M., Van't Riet, K.   (1990). Modeling bacterial growth curve.   Appl. Environ. Microbiol., 56(6), 1875-1881.","code":""},{"path":[]},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_gompertz2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Growth Model According to Gompertz — grow_gompertz2","text":"","code":"time <- seq(0, 30, length=200) y    <- grow_gompertz(time, c(y0=1, mumax=.2, K=10))[,\"y\"] plot(time, y, type=\"l\", ylim=c(0, 12))"},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_huang.html","id":null,"dir":"Reference","previous_headings":"","what":"Growth Model According to Huang — grow_huang","title":"Growth Model According to Huang — grow_huang","text":"Huangs growth model written analytical solution differential equations.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_huang.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Growth Model According to Huang — grow_huang","text":"","code":"grow_huang(time, parms)"},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_huang.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Growth Model According to Huang — grow_huang","text":"time vector time steps (independent variable). parms named parameter vector Huang's growth model : y0 initial value abundance, mumax maximum growth rate (1/time), K carrying capacity (max. total concentration cells), alpha shape parameter determining curvature, lambda parameter determining lag time.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_huang.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Growth Model According to Huang — grow_huang","text":"vector dependent variable (y).","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_huang.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Growth Model According to Huang — grow_huang","text":"version equation used package following form: $$B = time + 1/alpha * log((1+exp(-alpha * (time - lambda)))/(1 + exp(alpha * lambda)))$$ $$log(y) = log(y0) + log(K) - log(y0 + (K - y0) * exp(-mumax * B))$$ contrast original publication, parameters related population abundance (y, y0, K) given untransformed values. log-transformed. general, using log-transformed parameters indeed good idea avoid need constained optimization, tests showed box-constrained optimization worked resonably well. Therefore, handling optionally log-transformed parameters removed package avoid confusion. want discuss , please let know.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_huang.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Growth Model According to Huang — grow_huang","text":"Huang, Lihan (2008) Growth kinetics Listeria monocytogenes broth beef frankfurters - determination lag phase duration exponential growth rate isothermal conditions. Journal Food Science 73(5), E235 – E242. doi:10.1111/j.1750-3841.2008.00785.x Huang, Lihan (2011) new mechanistic growth model simultaneous determination lag phase duration exponential growth rate new Belehdradek-type model evaluating effect temperature growth rate. Food Microbiology 28, 770 – 776. doi:10.1016/j.fm.2010.05.019 Huang, Lihan (2013) Introduction USDA Integrated Pathogen Modeling Program (IPMP). Residue Chemistry Predictive Microbiology Research Unit. USDA Agricultural Research Service.","code":""},{"path":[]},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_huang.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Growth Model According to Huang — grow_huang","text":"","code":"time <- seq(0, 30, length=200) y    <- grow_huang(time, c(y0=0.01, mumax=.1, K=0.1, alpha=1.5, lambda=3))[,\"y\"] plot(time, y, type=\"l\")  plot(time, y, type=\"l\", log=\"y\")"},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_logistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Logistic Growth Model — grow_logistic","title":"Logistic Growth Model — grow_logistic","text":"Classical logistic growth model written analytical solution differential equation.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_logistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logistic Growth Model — grow_logistic","text":"","code":"grow_logistic(time, parms)"},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_logistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logistic Growth Model — grow_logistic","text":"time vector time steps (independent variable) parms named parameter vector logistic growth model : y0 initial value population measure mumax intrinsic growth rate (1/time) K carrying capacity (max. total concentration cells)","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_logistic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logistic Growth Model — grow_logistic","text":"vector dependent variable (y).","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_logistic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Logistic Growth Model — grow_logistic","text":"equation used : $$y = (K * y0) / (y0 + (K - y0) * exp(-mumax * time))$$","code":""},{"path":[]},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_logistic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logistic Growth Model — grow_logistic","text":"","code":"time <- seq(0, 30, length=200) y    <- grow_logistic(time, c(y0=1, mumax=0.5, K=10))[,\"y\"] plot(time, y, type=\"l\")"},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_richards.html","id":null,"dir":"Reference","previous_headings":"","what":"Growth Model According to Richards — grow_richards","title":"Growth Model According to Richards — grow_richards","text":"Richards growth model written analytical solution differential equation.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_richards.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Growth Model According to Richards — grow_richards","text":"","code":"grow_richards(time, parms)"},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_richards.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Growth Model According to Richards — grow_richards","text":"time vector time steps (independent variable). parms named parameter vector Richards growth model : y0 initial value abundance, mumax maximum growth rate (note different interpretation compared     exponential growth), K carrying capacity (max. total concentration cells), beta shape parameter determining curvature.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_richards.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Growth Model According to Richards — grow_richards","text":"vector dependent variable (y).","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_richards.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Growth Model According to Richards — grow_richards","text":"equation used : $$y = K*(1-exp(-beta * mumax * time)*(1-(y0/K)^-beta))^(-1/beta)$$ naming parameters used follows convention Tsoularis (2001), uses mumax growthrate y abundance make consistent growth functions.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_richards.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Growth Model According to Richards — grow_richards","text":"Richards, F. J. (1959) Flexible Growth Function Empirical Use. Journal Experimental Botany 10 (2): 290–300. Tsoularis, . (2001) Analysis Logistic Growth Models. Res. Lett. Inf. Math. Sci, (2001) 2, 23–46.","code":""},{"path":[]},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_richards.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Growth Model According to Richards — grow_richards","text":"","code":"time <- seq(0, 30, length=200) y    <- grow_richards(time, c(y0=1, mumax=.5, K=10, beta=2))[,\"y\"] plot(time, y, type=\"l\") y    <- grow_richards(time, c(y0=1, mumax=.5, K=10, beta=100))[,\"y\"] lines(time, y, col=\"red\") y    <- grow_richards(time, c(y0=1, mumax=.5, K=10, beta=.2))[,\"y\"] lines(time, y, col=\"blue\")"},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_twostep.html","id":null,"dir":"Reference","previous_headings":"","what":"Twostep Growth Model — ode_twostep","title":"Twostep Growth Model — ode_twostep","text":"System two differential equations describing bacterial growth two-step process activation (adaptation) growth.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_twostep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Twostep Growth Model — ode_twostep","text":"","code":"ode_twostep(time, y, parms, ...)  grow_twostep(time, parms, ...)"},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_twostep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Twostep Growth Model — ode_twostep","text":"time actual time (ode) resp. vector simulation time steps. y named vector state system (yi, ya: abundance inactive active organisms, e.g. concentration inactive resp. active cells). parms parameters two-step growth model: yi, ya initial abundance active inactive organisms, kw activation (“wakeup”) constant (1/time), mumax maximum growth rate (1/time), K carrying capacity (max. abundance). ... placeholder additional parameters (user-extended versions function)","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_twostep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Twostep Growth Model — ode_twostep","text":"ode_twostep: matrix containing simulation outputs. return value also class deSolve. grow_twostep: vector dependent variable (y): time time simulation yi concentration inactive cells ya concentration active cells y total cell concentration","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_twostep.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Twostep Growth Model — ode_twostep","text":"model given system two differential equations: $$dy_i/dt = -kw * yi$$ $$dy_a/dt =  kw * yi + mumax * (1 - (yi + ya)/K) * ya$$ numerically integrated ('simulated') according time (t). model assumes population consists active (\\(y_a\\)) inactive (\\(y_i\\)) cells observed abundance (\\(y = y_i + y_a\\)). Adapting inactive cells change active state first order 'wakeup' rate (\\(kw\\)). Function ode_twostep system differential equations, whereas grow_twostep runs numerical simulation time. similar two-compartment model, without logistic term, discussed Baranyi (1998).","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_twostep.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Twostep Growth Model — ode_twostep","text":"Baranyi, J. (1998). Comparison stochastic deterministic concepts bacterial lag. J. heor. Biol. 192, 403–408.","code":""},{"path":[]},{"path":"http://tpetzoldt.github.io/growthrates/reference/grow_twostep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Twostep Growth Model — ode_twostep","text":"","code":"time <- seq(0, 30, length=200) parms <- c(kw = 0.1,  mumax=0.2, K=0.1) y0    <-  c(yi=0.01, ya=0.0) out   <- ode(y0, time, ode_twostep, parms)  plot(out)  o <- grow_twostep(0:100, c(yi=0.01, ya=0.0, kw = 0.1,  mumax=0.2, K=0.1)) plot(o)"},{"path":"http://tpetzoldt.github.io/growthrates/reference/growthmodel-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class of Growth Model Functions — growthmodel-class","title":"Class of Growth Model Functions — growthmodel-class","text":"class used parametric grow_... functions package can also used user-defined functions describe time-dependent growth organisms.","code":""},{"path":[]},{"path":"http://tpetzoldt.github.io/growthrates/reference/growthmodel-constructor.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a User-defined Parametric Growth Model — growthmodel","title":"Create a User-defined Parametric Growth Model — growthmodel","text":"constructor method allows create user-defined functions   can used parametric models describing time-dependent   growth organisms.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/growthmodel-constructor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a User-defined Parametric Growth Model — growthmodel","text":"","code":"growthmodel(x, pnames = NULL)"},{"path":"http://tpetzoldt.github.io/growthrates/reference/growthmodel-constructor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a User-defined Parametric Growth Model — growthmodel","text":"x function arguments times parms, returning matrix two columns time y. pnames character vector names model parameters.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/growthmodel-constructor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a User-defined Parametric Growth Model — growthmodel","text":"Package growthrates plug-architecture allowing   user-defined growth models following form: time numeric vector parms named, non-nested     list model parameters. constructor function growthmodel     used attach names parameters optional     attribute.","code":"identifier <- function(time, parms) {     ... content of function here ...     return(as.matrix(data.frame(time=time, y=y)))   }"},{"path":[]},{"path":"http://tpetzoldt.github.io/growthrates/reference/growthmodel-constructor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a User-defined Parametric Growth Model — growthmodel","text":"","code":"test <- function(time, parms) {   with(as.list(parms), {     y <- (K * y0) / (y0 + (K - y0) * exp(-mumax * time)) + y_shift     return(as.matrix(data.frame(time=time, y=y)))  }) }  mygrowthmodel <- growthmodel(test, c(\"y0\", \"mumax\", \"K\", \"y_shift\"))"},{"path":"http://tpetzoldt.github.io/growthrates/reference/growthrates-classes.html","id":null,"dir":"Reference","previous_headings":"","what":"S4 Classes of Package growthrates — growthrates_fit-class","title":"S4 Classes of Package growthrates — growthrates_fit-class","text":"growthrates_fit: top-level class representing growthrates fit method.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/growthrates-classes.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"S4 Classes of Package growthrates — growthrates_fit-class","text":"FUN model function used. fit results model fit. obs observation data used model fitting. rsquared coefficient determination. par parameters fit. ndx index values time points used (easylinear_fit). xy x y values maximum spline.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/growthrates-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Growth Rates from Experimental Data — growthrates-package","title":"Estimate Growth Rates from Experimental Data — growthrates-package","text":"collection methods determine growth rates     experimental data, particular batch experiments     plate reader trials. package contains basically three methods: fit linear regression subset data steepest     log-linear increase (method, similar Hall et al., 2013), fit parametric nonlinear models complete data set,      model functions can given either closed form numerically      solved (system ) differential equation(s), use maximum 1st derivative smoothing spline     log-transformed y-values (similar Kahm et al., 2010). package can fit data sets single experiments complete series containing multiple data sets. Included functions extracting estimates plotting. package supports growth models given numerically solved differential equations. Multi-core computation used speed fitting parametric models.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/growthrates-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate Growth Rates from Experimental Data — growthrates-package","text":"Hall, B. G., Acar, H. Barlow, M. 2013. Growth Rates Made Easy.   Mol. Biol. Evol. 31, 232-238, doi:10.1093/molbev/mst197 Kahm, M., Hasenbrink, G., Lichtenberg-Frate, H., Ludwig, J., Kschischo, M.   2010. grofit: Fitting Biological Growth Curves R.   Journal Statistical Software, 33(7), 1-21,   doi:10.18637/jss.v033.i07 Soetaert, K. Petzoldt, T. 2010. Inverse Modelling, Sensitivity   Monte Carlo Analysis R Using Package FME.   Journal Statistical Software, 33(3), 1-28,   doi:10.18637/jss.v033.i03 Soetaert, K., Petzoldt, T. Setzer, R. W. 2010. Solving Differential Equations   R: Package deSolve. Journal Statistical Software, 33(9), 1-25,   doi:10.18637/jss.v033.i09","code":""},{"path":[]},{"path":"http://tpetzoldt.github.io/growthrates/reference/growthrates-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimate Growth Rates from Experimental Data — growthrates-package","text":"Thomas Petzoldt","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/growthrates-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Growth Rates from Experimental Data — growthrates-package","text":"","code":"data(bactgrowth) splitted.data <- multisplit(bactgrowth, c(\"strain\", \"conc\", \"replicate\"))  ## get table from single experiment dat <- splitted.data[[\"D:0:1\"]]  fit1 <- fit_spline(dat$time, dat$value) plot(fit1, log=\"y\")  plot(fit1)  ## derive start parameters from spline fit p <- coef(fit1)  ## subset of first 10 data first10 <-  dat[1:10, ] fit2 <- fit_growthmodel(grow_exponential, p=p, time=first10$time, y=first10$value)  ## use parameters from spline fit and take K from the data maximum p <- c(coef(fit1), K = max(dat$value)) fit3 <- fit_growthmodel(grow_logistic, p=p, time=dat$time, y=dat$value, transform=\"log\")  plot(fit1) lines(fit2, col=\"green\") lines(fit3, col=\"red\")"},{"path":"http://tpetzoldt.github.io/growthrates/reference/lm_or_NULL-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Union Class of Linear Model or NULL — lm_or_NULL-class","title":"Union Class of Linear Model or NULL — lm_or_NULL-class","text":"Class handle -growth cases","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/lm_window.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Exponential Growth Model with a Heuristic Linear Method — lm_window","title":"Fit Exponential Growth Model with a Heuristic Linear Method — lm_window","text":"Helper functions handling linear fits.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/lm_window.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Exponential Growth Model with a Heuristic Linear Method — lm_window","text":"","code":"lm_window(x, y, i0, h = 5)  lm_parms(m)"},{"path":"http://tpetzoldt.github.io/growthrates/reference/lm_window.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Exponential Growth Model with a Heuristic Linear Method — lm_window","text":"x vector independent variable (e.g. time). y vector dependent variable (concentration organisms). i0 index first value used window. h window (number data). m linear model (lm) object","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/lm_window.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Exponential Growth Model with a Heuristic Linear Method — lm_window","text":"linear model object (lm_window   resp. vector parameters fit (lm_parms).","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/lm_window.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit Exponential Growth Model with a Heuristic Linear Method — lm_window","text":"functions used heuristic linear approach, similar “growth rates made easy”-method Hall et al. (2013).","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/lm_window.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit Exponential Growth Model with a Heuristic Linear Method — lm_window","text":"Hall, B. G., H. Acar M. Barlow 2013. Growth Rates Made Easy.   Mol. Biol. Evol. 31: 232-238 doi:10.1093/molbev/mst197","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessor Methods of Package growthrates. — rsquared,growthrates_fit-method","title":"Accessor Methods of Package growthrates. — rsquared,growthrates_fit-method","text":"Functions access results fitted growthrate objects:  summary,  coef, rsquared, deviance, residuals,  df.residual, obs, results.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessor Methods of Package growthrates. — rsquared,growthrates_fit-method","text":"","code":"# S4 method for class 'growthrates_fit' rsquared(object, ...)  # S4 method for class 'growthrates_fit' obs(object, ...)  # S4 method for class 'growthrates_fit' coef(object, extended = FALSE, ...)  # S4 method for class 'easylinear_fit' coef(object, ...)  # S4 method for class 'smooth.spline_fit' coef(object, extended = FALSE, ...)  # S4 method for class 'growthrates_fit' deviance(object, ...)  # S4 method for class 'growthrates_fit' summary(object, ...)  # S4 method for class 'nonlinear_fit' summary(object, cov = TRUE, ...)  # S4 method for class 'growthrates_fit' residuals(object, ...)  # S4 method for class 'growthrates_fit' df.residual(object, ...)  # S4 method for class 'smooth.spline_fit' summary(object, cov = TRUE, ...)  # S4 method for class 'smooth.spline_fit' df.residual(object, ...)  # S4 method for class 'smooth.spline_fit' deviance(object, ...)  # S4 method for class 'multiple_fits' coef(object, ...)  # S4 method for class 'multiple_fits' rsquared(object, ...)  # S4 method for class 'multiple_fits' deviance(object, ...)  # S4 method for class 'multiple_fits' results(object, ...)  # S4 method for class 'multiple_easylinear_fits' results(object, ...)  # S4 method for class 'multiple_fits' summary(object, ...)  # S4 method for class 'multiple_fits' residuals(object, ...)"},{"path":"http://tpetzoldt.github.io/growthrates/reference/methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessor Methods of Package growthrates. — rsquared,growthrates_fit-method","text":"object name 'growthrate' object. ... arguments passed methods. extended boolean extended set parameters shoild printed cov boolean covariance matrix printed.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessor Methods of Package growthrates. — rsquared,growthrates_fit-method","text":"","code":"data(bactgrowth) splitted.data <- multisplit(bactgrowth, c(\"strain\", \"conc\", \"replicate\"))  ## get table from single experiment dat <- splitted.data[[10]]  fit1 <- fit_spline(dat$time, dat$value, spar=0.5) coef(fit1) #>          y0       mumax  #> 0.007061752 0.284758023  summary(fit1) #> Fitted smoothing spline: #> Call: #> smooth.spline(x = time, y = ylog, spar = 0.5) #>  #> Smoothing Parameter  spar= 0.5  lambda= 0.0001077001 #> Equivalent Degrees of Freedom (Df): 9.337058 #> Penalized Criterion (RSS): 0.05991467 #> GCV: 0.003957856 #>  #> Parameter values of exponential growth curve: #> Maximum growth at x= 4.042719 , y= 0.02232908  #> y0 = 0.007061752  #> mumax = 0.284758  #>  #> r2 of log transformed data= 0.995436   ## derive start parameters from spline fit p <- c(coef(fit1), K = max(dat$value)) fit2 <- fit_growthmodel(grow_logistic, p=p, time=dat$time, y=dat$value, transform=\"log\") coef(fit2) #>          y0       mumax           K  #> 0.008668589 0.293698939 0.081412765  rsquared(fit2) #> [1] 0.9820697 deviance(fit2) #> [1] 0.2353843  summary(fit2) #>  #> Parameters: #>       Estimate Std. Error t value Pr(>|t|)     #> y0    0.008669   0.000499   17.37   <2e-16 *** #> mumax 0.293699   0.015222   19.30   <2e-16 *** #> K     0.081413   0.002036   39.99   <2e-16 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.09169 on 28 degrees of freedom #>  #> Parameter correlation: #>            y0   mumax       K #> y0     1.0000 -0.7522  0.2312 #> mumax -0.7522  1.0000 -0.5005 #> K      0.2312 -0.5005  1.0000  plot(residuals(fit2) ~ obs(fit2)[,2])"},{"path":"http://tpetzoldt.github.io/growthrates/reference/multisplit.html","id":null,"dir":"Reference","previous_headings":"","what":"Split Data Frame into Multiple Groups — multisplit","title":"Split Data Frame into Multiple Groups — multisplit","text":"data frame split list data subsets defined multiple groups.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/multisplit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split Data Frame into Multiple Groups — multisplit","text":"","code":"multisplit(data, grouping, drop = TRUE, sep = \":\", ...)  # S4 method for class 'data.frame,formula' multisplit(data, grouping, drop = TRUE, sep = \":\", ...)  # S4 method for class 'data.frame,character' multisplit(data, grouping, drop = TRUE, sep = \":\", ...)  # S4 method for class 'data.frame,factor' multisplit(data, grouping, drop = TRUE, sep = \":\", ...)  # S4 method for class 'data.frame,list' multisplit(data, grouping, drop = TRUE, sep = \":\", ...)  # S4 method for class 'ANY,ANY' multisplit(data, grouping, drop = TRUE, sep = \":\", ...)"},{"path":"http://tpetzoldt.github.io/growthrates/reference/multisplit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split Data Frame into Multiple Groups — multisplit","text":"data data frame, matrix vector containing several subsets data grouping either character vector containing names grouping variables model formula specifying dependent, independent grouping variables form: dependent ~ independent | group1 + group2 + .... may also factor list factors split. drop drop TRUE, unused factor levels dropped result. default drop factor levels. sep string construct new level labels joining constituent ones. ... parameters passed split, see details.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/multisplit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split Data Frame into Multiple Groups — multisplit","text":"list containing data frames data subsets elements.   components list named grouping levels.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/multisplit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Split Data Frame into Multiple Groups — multisplit","text":"function wrapper around split   different defaults, slightly different behavior, methods additional   argument classes. multisplit returns always data frame.","code":""},{"path":[]},{"path":"http://tpetzoldt.github.io/growthrates/reference/multisplit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split Data Frame into Multiple Groups — multisplit","text":"","code":"data(bactgrowth)  ## simple method spl <- multisplit(bactgrowth, c(\"strain\", \"conc\", \"replicate\"))  ## preferred method spl <- multisplit(bactgrowth, value ~ time | strain + conc + replicate)  ## show what is in one data set spl[[1]] #>      time value #> 1117    0 0.018 #> 1118    1 0.018 #> 1119    2 0.019 #> 1120    3 0.022 #> 1121    4 0.027 #> 1122    5 0.036 #> 1123    6 0.045 #> 1124    7 0.049 #> 1125    8 0.056 #> 1126    9 0.061 #> 1127   10 0.064 #> 1128   11 0.069 #> 1129   12 0.072 #> 1130   13 0.075 #> 1131   14 0.078 #> 1132   15 0.078 #> 1133   16 0.079 #> 1134   17 0.083 #> 1135   18 0.086 #> 1136   19 0.088 #> 1137   20 0.088 #> 1138   21 0.089 #> 1139   22 0.089 #> 1140   23 0.090 #> 1141   24 0.093 #> 1142   25 0.094 #> 1143   26 0.098 #> 1144   27 0.101 #> 1145   28 0.104 #> 1146   29 0.105 #> 1147   30 0.107 summary(spl[[1]]) #>       time          value         #>  Min.   : 0.0   Min.   :0.01800   #>  1st Qu.: 7.5   1st Qu.:0.05250   #>  Median :15.0   Median :0.07800   #>  Mean   :15.0   Mean   :0.07035   #>  3rd Qu.:22.5   3rd Qu.:0.08950   #>  Max.   :30.0   Max.   :0.10700    ## use factor combination spl[[\"D:0:1\"]] #>      time value #> 1117    0 0.018 #> 1118    1 0.018 #> 1119    2 0.019 #> 1120    3 0.022 #> 1121    4 0.027 #> 1122    5 0.036 #> 1123    6 0.045 #> 1124    7 0.049 #> 1125    8 0.056 #> 1126    9 0.061 #> 1127   10 0.064 #> 1128   11 0.069 #> 1129   12 0.072 #> 1130   13 0.075 #> 1131   14 0.078 #> 1132   15 0.078 #> 1133   16 0.079 #> 1134   17 0.083 #> 1135   18 0.086 #> 1136   19 0.088 #> 1137   20 0.088 #> 1138   21 0.089 #> 1139   22 0.089 #> 1140   23 0.090 #> 1141   24 0.093 #> 1142   25 0.094 #> 1143   26 0.098 #> 1144   27 0.101 #> 1145   28 0.104 #> 1146   29 0.105 #> 1147   30 0.107 summary(spl[[\"D:0:1\"]]) #>       time          value         #>  Min.   : 0.0   Min.   :0.01800   #>  1st Qu.: 7.5   1st Qu.:0.05250   #>  Median :15.0   Median :0.07800   #>  Mean   :15.0   Mean   :0.07035   #>  3rd Qu.:22.5   3rd Qu.:0.08950   #>  Max.   :30.0   Max.   :0.10700     lapply(spl, FUN=function(x)  plot(x$time, x$value,       main=paste(x[1, \"strain\"], x[1, \"conc\"], x[1, \"replicate\"], sep=\":\")))                                                                         #> $`D:0:1` #> NULL #>  #> $`R:0:1` #> NULL #>  #> $`T:0:1` #> NULL #>  #> $`D:0.24:1` #> NULL #>  #> $`R:0.24:1` #> NULL #>  #> $`T:0.24:1` #> NULL #>  #> $`D:0.49:1` #> NULL #>  #> $`R:0.49:1` #> NULL #>  #> $`T:0.49:1` #> NULL #>  #> $`D:0.98:1` #> NULL #>  #> $`R:0.98:1` #> NULL #>  #> $`T:0.98:1` #> NULL #>  #> $`D:1.95:1` #> NULL #>  #> $`R:1.95:1` #> NULL #>  #> $`T:1.95:1` #> NULL #>  #> $`D:3.91:1` #> NULL #>  #> $`R:3.91:1` #> NULL #>  #> $`T:3.91:1` #> NULL #>  #> $`D:7.81:1` #> NULL #>  #> $`R:7.81:1` #> NULL #>  #> $`T:7.81:1` #> NULL #>  #> $`D:15.63:1` #> NULL #>  #> $`R:15.63:1` #> NULL #>  #> $`T:15.63:1` #> NULL #>  #> $`D:31.25:1` #> NULL #>  #> $`R:31.25:1` #> NULL #>  #> $`T:31.25:1` #> NULL #>  #> $`D:62.5:1` #> NULL #>  #> $`R:62.5:1` #> NULL #>  #> $`T:62.5:1` #> NULL #>  #> $`D:125:1` #> NULL #>  #> $`R:125:1` #> NULL #>  #> $`T:125:1` #> NULL #>  #> $`D:250:1` #> NULL #>  #> $`R:250:1` #> NULL #>  #> $`T:250:1` #> NULL #>  #> $`D:0:2` #> NULL #>  #> $`R:0:2` #> NULL #>  #> $`T:0:2` #> NULL #>  #> $`D:0.24:2` #> NULL #>  #> $`R:0.24:2` #> NULL #>  #> $`T:0.24:2` #> NULL #>  #> $`D:0.49:2` #> NULL #>  #> $`R:0.49:2` #> NULL #>  #> $`T:0.49:2` #> NULL #>  #> $`D:0.98:2` #> NULL #>  #> $`R:0.98:2` #> NULL #>  #> $`T:0.98:2` #> NULL #>  #> $`D:1.95:2` #> NULL #>  #> $`R:1.95:2` #> NULL #>  #> $`T:1.95:2` #> NULL #>  #> $`D:3.91:2` #> NULL #>  #> $`R:3.91:2` #> NULL #>  #> $`T:3.91:2` #> NULL #>  #> $`D:7.81:2` #> NULL #>  #> $`R:7.81:2` #> NULL #>  #> $`T:7.81:2` #> NULL #>  #> $`D:15.63:2` #> NULL #>  #> $`R:15.63:2` #> NULL #>  #> $`T:15.63:2` #> NULL #>  #> $`D:31.25:2` #> NULL #>  #> $`R:31.25:2` #> NULL #>  #> $`T:31.25:2` #> NULL #>  #> $`D:62.5:2` #> NULL #>  #> $`R:62.5:2` #> NULL #>  #> $`T:62.5:2` #> NULL #>  #> $`D:125:2` #> NULL #>  #> $`R:125:2` #> NULL #>  #> $`T:125:2` #> NULL #>  #> $`D:250:2` #> NULL #>  #> $`R:250:2` #> NULL #>  #> $`T:250:2` #> NULL #>"},{"path":"http://tpetzoldt.github.io/growthrates/reference/names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Names Attributes of Growth Models — names.growthmodel","title":"Get Names Attributes of Growth Models — names.growthmodel","text":"Methods get parameter names growth model get set   identifiers multiple_fits objects.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Names Attributes of Growth Models — names.growthmodel","text":"","code":"# S3 method for class 'growthmodel' names(x)  # S4 method for class 'multiple_fits' names(x)  # S4 method for class 'multiple_fits' names(x) <- value"},{"path":"http://tpetzoldt.github.io/growthrates/reference/names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Names Attributes of Growth Models — names.growthmodel","text":"x either function parametric growth model package growthmodels object multiple fits. value character vector length x, NULL","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Names Attributes of Growth Models — names.growthmodel","text":"character vector parameter names","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/names.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Get Names Attributes of Growth Models — names.growthmodel","text":"Method class growthmodel: returns information   valid parameter names pnames attribute exists, else NULL.   NULL. Method class multiple_fits: can applied objects   returned all_growthmodels, all_splines   all_easylinear respectively. can useful selecting   subsets, e.g. plotting, see example .","code":""},{"path":[]},{"path":"http://tpetzoldt.github.io/growthrates/reference/names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Names Attributes of Growth Models — names.growthmodel","text":"","code":"## growthmodel-method names(grow_baranyi) #> [1] \"y0\"    \"mumax\" \"K\"     \"h0\"     ## multiple_fits-method L <- all_splines(value ~ time | strain + conc + replicate,        data = bactgrowth)  names(L) #>  [1] \"D:0:1\"     \"R:0:1\"     \"T:0:1\"     \"D:0.24:1\"  \"R:0.24:1\"  \"T:0.24:1\"  #>  [7] \"D:0.49:1\"  \"R:0.49:1\"  \"T:0.49:1\"  \"D:0.98:1\"  \"R:0.98:1\"  \"T:0.98:1\"  #> [13] \"D:1.95:1\"  \"R:1.95:1\"  \"T:1.95:1\"  \"D:3.91:1\"  \"R:3.91:1\"  \"T:3.91:1\"  #> [19] \"D:7.81:1\"  \"R:7.81:1\"  \"T:7.81:1\"  \"D:15.63:1\" \"R:15.63:1\" \"T:15.63:1\" #> [25] \"D:31.25:1\" \"R:31.25:1\" \"T:31.25:1\" \"D:62.5:1\"  \"R:62.5:1\"  \"T:62.5:1\"  #> [31] \"D:125:1\"   \"R:125:1\"   \"T:125:1\"   \"D:250:1\"   \"R:250:1\"   \"T:250:1\"   #> [37] \"D:0:2\"     \"R:0:2\"     \"T:0:2\"     \"D:0.24:2\"  \"R:0.24:2\"  \"T:0.24:2\"  #> [43] \"D:0.49:2\"  \"R:0.49:2\"  \"T:0.49:2\"  \"D:0.98:2\"  \"R:0.98:2\"  \"T:0.98:2\"  #> [49] \"D:1.95:2\"  \"R:1.95:2\"  \"T:1.95:2\"  \"D:3.91:2\"  \"R:3.91:2\"  \"T:3.91:2\"  #> [55] \"D:7.81:2\"  \"R:7.81:2\"  \"T:7.81:2\"  \"D:15.63:2\" \"R:15.63:2\" \"T:15.63:2\" #> [61] \"D:31.25:2\" \"R:31.25:2\" \"T:31.25:2\" \"D:62.5:2\"  \"R:62.5:2\"  \"T:62.5:2\"  #> [67] \"D:125:2\"   \"R:125:2\"   \"T:125:2\"   \"D:250:2\"   \"R:250:2\"   \"T:250:2\"    ## plot only the 'R' strain # par(mfrow=c(4, 6)) plot(L[grep(\"R:\", names(L))])"},{"path":"http://tpetzoldt.github.io/growthrates/reference/parse_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple Formula Interface — parse_formula","title":"Simple Formula Interface — parse_formula","text":"simple formula interface handles formulae form   dependent ~ independent | group1 + group2 + ....","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/parse_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple Formula Interface — parse_formula","text":"","code":"parse_formula(grouping)"},{"path":"http://tpetzoldt.github.io/growthrates/reference/parse_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple Formula Interface — parse_formula","text":"grouping model formula specifying dependent, independent grouping variables form: dependent ~ independent | group1 + group2 + ....","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/parse_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple Formula Interface — parse_formula","text":"list elements valuevar,  timevar,   groups","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/parse_formula.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simple Formula Interface — parse_formula","text":"function used multisplit normally called   user.","code":""},{"path":[]},{"path":"http://tpetzoldt.github.io/growthrates/reference/parse_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple Formula Interface — parse_formula","text":"","code":"parse_formula(y ~ x | a+b+c) #> $valuevar #> [1] \"y\" #>  #> $timevar #> [1] \"x\" #>  #> $groups #> [1] \"a\" \"b\" \"c\" #>"},{"path":"http://tpetzoldt.github.io/growthrates/reference/parse_formula_nonlin.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple Formula Interface for Grouped Nonlinear Functions — parse_formula_nonlin","title":"Simple Formula Interface for Grouped Nonlinear Functions — parse_formula_nonlin","text":"simple formula interface handles formulae form   dependent ~ FUN(independent, parms) | group1 + group2 + ....","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/parse_formula_nonlin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple Formula Interface for Grouped Nonlinear Functions — parse_formula_nonlin","text":"","code":"parse_formula_nonlin(formula)"},{"path":"http://tpetzoldt.github.io/growthrates/reference/parse_formula_nonlin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple Formula Interface for Grouped Nonlinear Functions — parse_formula_nonlin","text":"formula model formula specifying dependent independent variables, nonlinear model grouping variables form: dependent ~ FUN(independent, parms) | group1 + group2 + .... FUN can name existing growth model (e.g. grow_logistic) valid user-defined function (see growthmodel).","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/parse_formula_nonlin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple Formula Interface for Grouped Nonlinear Functions — parse_formula_nonlin","text":"list elements FUN, valuevar,  timevar, groups","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/parse_formula_nonlin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simple Formula Interface for Grouped Nonlinear Functions — parse_formula_nonlin","text":"function used all_growthmodels normally   called user.","code":""},{"path":[]},{"path":"http://tpetzoldt.github.io/growthrates/reference/parse_formula_nonlin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple Formula Interface for Grouped Nonlinear Functions — parse_formula_nonlin","text":"","code":"ret <- parse_formula_nonlin(y ~ f(x, parms) | a + b + c)"},{"path":"http://tpetzoldt.github.io/growthrates/reference/plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Model Fits — plot","title":"Plot Model Fits — plot","text":"Methods plot growth model fits together data , alternatively, plot diagnostics","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Model Fits — plot","text":"","code":"# S4 method for class 'nonlinear_fit,missing' plot(x, y, log = \"\", which = c(\"fit\", \"diagnostics\"), ...)  # S4 method for class 'nonlinear_fit' lines(x, ...)  # S4 method for class 'easylinear_fit,missing' plot(x, y, log = \"\", which = c(\"fit\", \"diagnostics\"), ...)  # S4 method for class 'smooth.spline_fit,missing' plot(x, y, ...)  # S4 method for class 'easylinear_fit' lines(x, ...)  # S4 method for class 'multiple_fits,missing' plot(x, y, ...)"},{"path":"http://tpetzoldt.github.io/growthrates/reference/plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Model Fits — plot","text":"x object returned model fitting function package growthrates, can contain one multiple fits. y (ignored) compatibility default plot method. log character string contains \"y\" y axis logarithmic. either \"fit\" (default) \"diagnostics\". ... arguments pased plotting methods, see plot.default par.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Model Fits — plot","text":"plot methods detect automatically type plot   appropriate, depending class x can plot either one   single model fit complete series (multiple fits). latter case   may wise redirect graphics external file (e.g. pdf)   / use tomething like par(mfrow=c(3,3)). lines-method currently available single fits. need control, can course also write plotting functions.","code":""},{"path":[]},{"path":"http://tpetzoldt.github.io/growthrates/reference/plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Model Fits — plot","text":"","code":"data(bactgrowth) splitted.data <- multisplit(bactgrowth, c(\"strain\", \"conc\", \"replicate\"))  ## get table from single experiment dat <- splitted.data[[\"D:0:1\"]]  fit1 <- fit_spline(dat$time, dat$value) plot(fit1, log=\"y\")  plot(fit1)  ## derive start parameters from spline fit p <- coef(fit1)  ## subset of first 10 data first10 <-  dat[1:10, ] fit2 <- fit_growthmodel(grow_exponential, p=p, time=first10$time, y=first10$value)  p <- c(coef(fit1), K = max(dat$value)) fit3 <- fit_growthmodel(grow_logistic, p=p, time=dat$time, y=dat$value, transform=\"log\")  plot(fit1) lines(fit2, col=\"green\") lines(fit3, col=\"red\")    all.fits <- all_splines(value ~ time | strain + conc + replicate, data = bactgrowth) par(mfrow=c(3,3)) plot(all.fits)          ## it is also possible to plot a single fit or a subset of the fits par(mfrow=c(1,1)) plot(all.fits[[\"D:0:1\"]])  par(mfrow=c(2,2)) plot(all.fits[1:4])   ## plot only the 'R' strain # par(mfrow=c(4, 6)) plot(all.fits[grep(\"R:\", names(all.fits))])"},{"path":"http://tpetzoldt.github.io/growthrates/reference/predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Model Predictions for growthrates Fits — predict,growthrates_fit-method","title":"Model Predictions for growthrates Fits — predict,growthrates_fit-method","text":"Class-specific methods package growthrates make predictions.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model Predictions for growthrates Fits — predict,growthrates_fit-method","text":"","code":"# S4 method for class 'growthrates_fit' predict(object, ...)  # S4 method for class 'smooth.spline_fit' predict(object, newdata = NULL, ..., type = c(\"exponential\", \"spline\"))  # S4 method for class 'easylinear_fit' predict(object, newdata = NULL, ..., type = c(\"exponential\", \"no_lag\"))  # S4 method for class 'nonlinear_fit' predict(object, newdata, ...)  # S4 method for class 'multiple_fits' predict(object, ...)"},{"path":"http://tpetzoldt.github.io/growthrates/reference/predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model Predictions for growthrates Fits — predict,growthrates_fit-method","text":"object name 'growthrates' object prediction desired. ... additional arguments affecting predictions produced. newdata optional data frame column 'time' new time steps predict. type type predict. Can 'exponential' 'spline' fit_spline, resp. 'exponential' 'no_lag' fit_easylinear.","code":""},{"path":"http://tpetzoldt.github.io/growthrates/reference/predict.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Model Predictions for growthrates Fits — predict,growthrates_fit-method","text":"implementation predict methods still experimental discussion.","code":""},{"path":[]},{"path":"http://tpetzoldt.github.io/growthrates/reference/predict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model Predictions for growthrates Fits — predict,growthrates_fit-method","text":"","code":"data(bactgrowth) splitted.data <- multisplit(bactgrowth, c(\"strain\", \"conc\", \"replicate\"))  ## get table from single experiment dat <- splitted.data[[1]]  ## --- linear fit ----------------------------------------------------------- fit <- fit_easylinear(dat$time, dat$value)  plot(fit) pr <- predict(fit) lines(pr[,1:2], col=\"blue\", lwd=2, lty=\"dashed\")  pr <- predict(fit, newdata=list(time=seq(2, 6, .1)), type=\"no_lag\") lines(pr[,1:2], col=\"magenta\")    ## --- spline fit ----------------------------------------------------------- fit1 <- fit_spline(dat$time, dat$value, spar=0.5) coef(fit1) #>         y0      mumax  #> 0.01234962 0.20570733  summary(fit1) #> Fitted smoothing spline: #> Call: #> smooth.spline(x = time, y = ylog, spar = 0.5) #>  #> Smoothing Parameter  spar= 0.5  lambda= 0.0001077001 #> Equivalent Degrees of Freedom (Df): 9.337058 #> Penalized Criterion (RSS): 0.02368248 #> GCV: 0.001564423 #>  #> Parameter values of exponential growth curve: #> Maximum growth at x= 4.576604 , y= 0.03166038  #> y0 = 0.01234962  #> mumax = 0.2057073  #>  #> r2 of log transformed data= 0.9974769   plot(fit1) pr <- predict(fit1) lines(pr[,1:2], lwd=2, col=\"blue\", lty=\"dashed\") pr <- predict(fit1, newdata=list(time=2:10), type=\"spline\") lines(pr[,1:2], lwd=2, col=\"cyan\")    ## --- nonlinear fit -------------------------------------------------------- dat <- splitted.data[[\"T:0:2\"]]  p   <- c(y0 = 0.02, mumax = .5, K = 0.05, h0 = 1) fit2 <- fit_growthmodel(grow_baranyi, p=p, time=dat$time, y=dat$value)  ## prediction for given data predict(fit2) #>       time          y #>  [1,]    0 0.01218537 #>  [2,]    1 0.01417349 #>  [3,]    2 0.01763037 #>  [4,]    3 0.02295527 #>  [5,]    4 0.02979975 #>  [6,]    5 0.03680981 #>  [7,]    6 0.04250263 #>  [8,]    7 0.04631674 #>  [9,]    8 0.04855420 #> [10,]    9 0.04976575 #> [11,]   10 0.05039345 #> [12,]   11 0.05071123 #> [13,]   12 0.05087023 #> [14,]   13 0.05094931 #> [15,]   14 0.05098853 #> [16,]   15 0.05100795 #> [17,]   16 0.05101756 #> [18,]   17 0.05102232 #> [19,]   18 0.05102467 #> [20,]   19 0.05102583 #> [21,]   20 0.05102641 #> [22,]   21 0.05102669 #> [23,]   22 0.05102683 #> [24,]   23 0.05102690 #> [25,]   24 0.05102694 #> [26,]   25 0.05102695 #> [27,]   26 0.05102696 #> [28,]   27 0.05102696 #> [29,]   28 0.05102697 #> [30,]   29 0.05102697 #> [31,]   30 0.05102697  ## prediction for new data pr <- predict(fit2, newdata=data.frame(time=seq(0, 50, 0.1)))  plot(fit2, xlim=c(0, 50)) lines(pr[, c(\"time\", \"y\")], lty=\"dashed\", col=\"red\")"}]
